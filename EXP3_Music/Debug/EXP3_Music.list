
EXP3_Music.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e98  08002e98  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08002e98  08002e98  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e98  08002e98  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08002ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200000c8  08002f68  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08002f68  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c9c  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001727  00000000  00000000  00027dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  000294f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079c  00000000  00000000  00029ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e72  00000000  00000000  0002a684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a7a3  00000000  00000000  000424f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000898db  00000000  00000000  0004cc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003050  00000000  00000000  000d6574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d95c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e24 	.word	0x08002e24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08002e24 	.word	0x08002e24

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa85 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f845 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8f5 	bl	8000348 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 f87d 	bl	800025c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000162:	2104      	movs	r1, #4
 8000164:	481a      	ldr	r0, [pc, #104]	; (80001d0 <main+0x84>)
 8000166:	f001 f9ef 	bl	8001548 <HAL_TIM_PWM_Start>
  TIM2->CCR2 = 2000;
 800016a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800016e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000172:	639a      	str	r2, [r3, #56]	; 0x38
     int i;
       //int n = 1 ;
       uint16_t current_note = 0;
 8000174:	2300      	movs	r3, #0
 8000176:	80fb      	strh	r3, [r7, #6]
       static uint32_t note_freq[8] = {261,294, 329, 349, 392, 440, 494, 522}; //Hz
       //static uint16_t song_notes[32] = {3,3,4,4,5,5,4,3,2,2,1,1,0,0};
       //static uint16_t song_notes[32] = {2, 2, 3, 2, 4, 4, 4, 4,1, 1, 2, 1, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1,0, 0, 0, 0, 0, 0, 0, 0};
       static uint16_t song_notes[32] = {4, 4, 5, 6, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 4, 3, 2, 2, 3, 4, 4, 3, 2, 1, 1, 2, 3, 4, 3, 2, 1, 1};

       int var=100;
 8000178:	2364      	movs	r3, #100	; 0x64
 800017a:	603b      	str	r3, [r7, #0]

   while (1)
   {
     /* USER CODE END WHILE */
 	  var = (8000000 / 10 /  note_freq[song_notes[current_note]]  ) - 1;
 800017c:	88fb      	ldrh	r3, [r7, #6]
 800017e:	4a15      	ldr	r2, [pc, #84]	; (80001d4 <main+0x88>)
 8000180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000184:	461a      	mov	r2, r3
 8000186:	4b14      	ldr	r3, [pc, #80]	; (80001d8 <main+0x8c>)
 8000188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800018c:	4a13      	ldr	r2, [pc, #76]	; (80001dc <main+0x90>)
 800018e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000192:	3b01      	subs	r3, #1
 8000194:	603b      	str	r3, [r7, #0]

 	  TIM2->ARR = var ;
 8000196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	62d3      	str	r3, [r2, #44]	; 0x2c
 	  TIM2->CCR2 = var/2 ;
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	0fda      	lsrs	r2, r3, #31
 80001a2:	4413      	add	r3, r2
 80001a4:	105b      	asrs	r3, r3, #1
 80001a6:	461a      	mov	r2, r3
 80001a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ac:	639a      	str	r2, [r3, #56]	; 0x38
 	  current_note = current_note+1;
 80001ae:	88fb      	ldrh	r3, [r7, #6]
 80001b0:	3301      	adds	r3, #1
 80001b2:	80fb      	strh	r3, [r7, #6]
 	  printf("%d\n",var);
 80001b4:	6839      	ldr	r1, [r7, #0]
 80001b6:	480a      	ldr	r0, [pc, #40]	; (80001e0 <main+0x94>)
 80001b8:	f001 ffb6 	bl	8002128 <iprintf>
 	  if (current_note > 31)  current_note = 0;
 80001bc:	88fb      	ldrh	r3, [r7, #6]
 80001be:	2b1f      	cmp	r3, #31
 80001c0:	d901      	bls.n	80001c6 <main+0x7a>
 80001c2:	2300      	movs	r3, #0
 80001c4:	80fb      	strh	r3, [r7, #6]
 	  HAL_Delay(200);
 80001c6:	20c8      	movs	r0, #200	; 0xc8
 80001c8:	f000 faac 	bl	8000724 <HAL_Delay>
   {
 80001cc:	e7d6      	b.n	800017c <main+0x30>
 80001ce:	bf00      	nop
 80001d0:	200000e4 	.word	0x200000e4
 80001d4:	20000000 	.word	0x20000000
 80001d8:	20000040 	.word	0x20000040
 80001dc:	000c3500 	.word	0x000c3500
 80001e0:	08002e3c 	.word	0x08002e3c

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	; 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 ffed 	bl	80021d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000206:	2302      	movs	r3, #2
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020e:	2310      	movs	r3, #16
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fd0e 	bl	8000c3c <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000226:	f000 f8a5 	bl	8000374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ff7c 	bl	8001140 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800024e:	f000 f891 	bl	8000374 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b08e      	sub	sp, #56	; 0x38
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000270:	f107 0320 	add.w	r3, r7, #32
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
 8000288:	615a      	str	r2, [r3, #20]
 800028a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800028c:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <MX_TIM2_Init+0xe8>)
 800028e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000294:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <MX_TIM2_Init+0xe8>)
 8000296:	2209      	movs	r2, #9
 8000298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800029a:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <MX_TIM2_Init+0xe8>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80002a0:	4b28      	ldr	r3, [pc, #160]	; (8000344 <MX_TIM2_Init+0xe8>)
 80002a2:	f241 3287 	movw	r2, #4999	; 0x1387
 80002a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002a8:	4b26      	ldr	r3, [pc, #152]	; (8000344 <MX_TIM2_Init+0xe8>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ae:	4b25      	ldr	r3, [pc, #148]	; (8000344 <MX_TIM2_Init+0xe8>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002b4:	4823      	ldr	r0, [pc, #140]	; (8000344 <MX_TIM2_Init+0xe8>)
 80002b6:	f001 f89f 	bl	80013f8 <HAL_TIM_Base_Init>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80002c0:	f000 f858 	bl	8000374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ce:	4619      	mov	r1, r3
 80002d0:	481c      	ldr	r0, [pc, #112]	; (8000344 <MX_TIM2_Init+0xe8>)
 80002d2:	f001 fa9d 	bl	8001810 <HAL_TIM_ConfigClockSource>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80002dc:	f000 f84a 	bl	8000374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002e0:	4818      	ldr	r0, [pc, #96]	; (8000344 <MX_TIM2_Init+0xe8>)
 80002e2:	f001 f8e1 	bl	80014a8 <HAL_TIM_PWM_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80002ec:	f000 f842 	bl	8000374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f0:	2300      	movs	r3, #0
 80002f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002f4:	2300      	movs	r3, #0
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002f8:	f107 0320 	add.w	r3, r7, #32
 80002fc:	4619      	mov	r1, r3
 80002fe:	4811      	ldr	r0, [pc, #68]	; (8000344 <MX_TIM2_Init+0xe8>)
 8000300:	f001 fdf2 	bl	8001ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800030a:	f000 f833 	bl	8000374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800030e:	2360      	movs	r3, #96	; 0x60
 8000310:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2204      	movs	r2, #4
 8000322:	4619      	mov	r1, r3
 8000324:	4807      	ldr	r0, [pc, #28]	; (8000344 <MX_TIM2_Init+0xe8>)
 8000326:	f001 f9b1 	bl	800168c <HAL_TIM_PWM_ConfigChannel>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000330:	f000 f820 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <MX_TIM2_Init+0xe8>)
 8000336:	f000 f871 	bl	800041c <HAL_TIM_MspPostInit>

}
 800033a:	bf00      	nop
 800033c:	3738      	adds	r7, #56	; 0x38
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000e4 	.word	0x200000e4

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_GPIO_Init+0x28>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a07      	ldr	r2, [pc, #28]	; (8000370 <MX_GPIO_Init+0x28>)
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <MX_GPIO_Init+0x28>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0304 	and.w	r3, r3, #4
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	e7fe      	b.n	800037c <Error_Handler+0x8>
	...

08000380 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a14      	ldr	r2, [pc, #80]	; (80003dc <HAL_MspInit+0x5c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <HAL_MspInit+0x5c>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <HAL_MspInit+0x60>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_MspInit+0x60>)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010000 	.word	0x40010000

080003e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003f4:	d10b      	bne.n	800040e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <HAL_TIM_PWM_MspInit+0x34>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <HAL_TIM_PWM_MspInit+0x34>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <HAL_TIM_PWM_MspInit+0x34>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000

0800041c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800043a:	d117      	bne.n	800046c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <HAL_TIM_MspPostInit+0x58>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <HAL_TIM_MspPostInit+0x58>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_TIM_MspPostInit+0x58>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000454:	2302      	movs	r3, #2
 8000456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000458:	2302      	movs	r3, #2
 800045a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4804      	ldr	r0, [pc, #16]	; (8000478 <HAL_TIM_MspPostInit+0x5c>)
 8000468:	f000 fa64 	bl	8000934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c2:	f000 f913 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}

080004ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b086      	sub	sp, #24
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	60f8      	str	r0, [r7, #12]
 80004d2:	60b9      	str	r1, [r7, #8]
 80004d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	e00a      	b.n	80004f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004dc:	f3af 8000 	nop.w
 80004e0:	4601      	mov	r1, r0
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	1c5a      	adds	r2, r3, #1
 80004e6:	60ba      	str	r2, [r7, #8]
 80004e8:	b2ca      	uxtb	r2, r1
 80004ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697a      	ldr	r2, [r7, #20]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	dbf0      	blt.n	80004dc <_read+0x12>
  }

  return len;
 80004fa:	687b      	ldr	r3, [r7, #4]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e009      	b.n	800052a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	60ba      	str	r2, [r7, #8]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	3301      	adds	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	429a      	cmp	r2, r3
 8000530:	dbf1      	blt.n	8000516 <_write+0x12>
  }
  return len;
 8000532:	687b      	ldr	r3, [r7, #4]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <_close>:

int _close(int file)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000562:	605a      	str	r2, [r3, #4]
  return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <_isatty>:

int _isatty(int file)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000578:	2301      	movs	r3, #1
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <_sbrk+0x5c>)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <_sbrk+0x60>)
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <_sbrk+0x64>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <_sbrk+0x68>)
 80005bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d207      	bcs.n	80005dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005cc:	f001 fe50 	bl	8002270 <__errno>
 80005d0:	4603      	mov	r3, r0
 80005d2:	220c      	movs	r2, #12
 80005d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e009      	b.n	80005f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <_sbrk+0x64>)
 80005ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20005000 	.word	0x20005000
 80005fc:	00000400 	.word	0x00000400
 8000600:	2000012c 	.word	0x2000012c
 8000604:	20000280 	.word	0x20000280

08000608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000614:	f7ff fff8 	bl	8000608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800061a:	490c      	ldr	r1, [pc, #48]	; (800064c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000630:	4c09      	ldr	r4, [pc, #36]	; (8000658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063e:	f001 fe1d 	bl	800227c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff fd83 	bl	800014c <main>
  bx lr
 8000646:	4770      	bx	lr
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8000650:	08002ea0 	.word	0x08002ea0
  ldr r2, =_sbss
 8000654:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8000658:	20000280 	.word	0x20000280

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_Init+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_Init+0x28>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f92b 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	200f      	movs	r0, #15
 8000678:	f000 f808 	bl	800068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067c:	f7ff fe80 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_InitTick+0x54>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x58>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f935 	bl	800091a <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f000 f90b 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_InitTick+0x5c>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000060 	.word	0x20000060
 80006e4:	20000068 	.word	0x20000068
 80006e8:	20000064 	.word	0x20000064

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x20>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <HAL_IncTick+0x20>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000068 	.word	0x20000068
 800070c:	20000130 	.word	0x20000130

08000710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <HAL_GetTick+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000130 	.word	0x20000130

08000724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800072c:	f7ff fff0 	bl	8000710 <HAL_GetTick>
 8000730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800073c:	d005      	beq.n	800074a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_Delay+0x44>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074a:	bf00      	nop
 800074c:	f7ff ffe0 	bl	8000710 <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	429a      	cmp	r2, r3
 800075a:	d8f7      	bhi.n	800074c <HAL_Delay+0x28>
  {
  }
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000068 	.word	0x20000068

0800076c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff90 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff49 	bl	800076c <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff5e 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff90 	bl	8000824 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffb0 	bl	8000888 <SysTick_Config>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b480      	push	{r7}
 8000936:	b08b      	sub	sp, #44	; 0x2c
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e169      	b.n	8000c1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000948:	2201      	movs	r2, #1
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	429a      	cmp	r2, r3
 8000962:	f040 8158 	bne.w	8000c16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	4a9a      	ldr	r2, [pc, #616]	; (8000bd4 <HAL_GPIO_Init+0x2a0>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d05e      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 8000970:	4a98      	ldr	r2, [pc, #608]	; (8000bd4 <HAL_GPIO_Init+0x2a0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d875      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 8000976:	4a98      	ldr	r2, [pc, #608]	; (8000bd8 <HAL_GPIO_Init+0x2a4>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d058      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 800097c:	4a96      	ldr	r2, [pc, #600]	; (8000bd8 <HAL_GPIO_Init+0x2a4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d86f      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 8000982:	4a96      	ldr	r2, [pc, #600]	; (8000bdc <HAL_GPIO_Init+0x2a8>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d052      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 8000988:	4a94      	ldr	r2, [pc, #592]	; (8000bdc <HAL_GPIO_Init+0x2a8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d869      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 800098e:	4a94      	ldr	r2, [pc, #592]	; (8000be0 <HAL_GPIO_Init+0x2ac>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d04c      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 8000994:	4a92      	ldr	r2, [pc, #584]	; (8000be0 <HAL_GPIO_Init+0x2ac>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d863      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 800099a:	4a92      	ldr	r2, [pc, #584]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d046      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
 80009a0:	4a90      	ldr	r2, [pc, #576]	; (8000be4 <HAL_GPIO_Init+0x2b0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d85d      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 80009a6:	2b12      	cmp	r3, #18
 80009a8:	d82a      	bhi.n	8000a00 <HAL_GPIO_Init+0xcc>
 80009aa:	2b12      	cmp	r3, #18
 80009ac:	d859      	bhi.n	8000a62 <HAL_GPIO_Init+0x12e>
 80009ae:	a201      	add	r2, pc, #4	; (adr r2, 80009b4 <HAL_GPIO_Init+0x80>)
 80009b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b4:	08000a2f 	.word	0x08000a2f
 80009b8:	08000a09 	.word	0x08000a09
 80009bc:	08000a1b 	.word	0x08000a1b
 80009c0:	08000a5d 	.word	0x08000a5d
 80009c4:	08000a63 	.word	0x08000a63
 80009c8:	08000a63 	.word	0x08000a63
 80009cc:	08000a63 	.word	0x08000a63
 80009d0:	08000a63 	.word	0x08000a63
 80009d4:	08000a63 	.word	0x08000a63
 80009d8:	08000a63 	.word	0x08000a63
 80009dc:	08000a63 	.word	0x08000a63
 80009e0:	08000a63 	.word	0x08000a63
 80009e4:	08000a63 	.word	0x08000a63
 80009e8:	08000a63 	.word	0x08000a63
 80009ec:	08000a63 	.word	0x08000a63
 80009f0:	08000a63 	.word	0x08000a63
 80009f4:	08000a63 	.word	0x08000a63
 80009f8:	08000a11 	.word	0x08000a11
 80009fc:	08000a25 	.word	0x08000a25
 8000a00:	4a79      	ldr	r2, [pc, #484]	; (8000be8 <HAL_GPIO_Init+0x2b4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a06:	e02c      	b.n	8000a62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	623b      	str	r3, [r7, #32]
          break;
 8000a0e:	e029      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	3304      	adds	r3, #4
 8000a16:	623b      	str	r3, [r7, #32]
          break;
 8000a18:	e024      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	3308      	adds	r3, #8
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e01f      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
          break;
 8000a2c:	e01a      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d102      	bne.n	8000a3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a36:	2304      	movs	r3, #4
 8000a38:	623b      	str	r3, [r7, #32]
          break;
 8000a3a:	e013      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d105      	bne.n	8000a50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a44:	2308      	movs	r3, #8
 8000a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	611a      	str	r2, [r3, #16]
          break;
 8000a4e:	e009      	b.n	8000a64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a50:	2308      	movs	r3, #8
 8000a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	615a      	str	r2, [r3, #20]
          break;
 8000a5a:	e003      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	e000      	b.n	8000a64 <HAL_GPIO_Init+0x130>
          break;
 8000a62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	2bff      	cmp	r3, #255	; 0xff
 8000a68:	d801      	bhi.n	8000a6e <HAL_GPIO_Init+0x13a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	e001      	b.n	8000a72 <HAL_GPIO_Init+0x13e>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3304      	adds	r3, #4
 8000a72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	2bff      	cmp	r3, #255	; 0xff
 8000a78:	d802      	bhi.n	8000a80 <HAL_GPIO_Init+0x14c>
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	e002      	b.n	8000a86 <HAL_GPIO_Init+0x152>
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	3b08      	subs	r3, #8
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	401a      	ands	r2, r3
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 80b1 	beq.w	8000c16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab4:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <HAL_GPIO_Init+0x2b8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a4c      	ldr	r2, [pc, #304]	; (8000bec <HAL_GPIO_Init+0x2b8>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <HAL_GPIO_Init+0x2b8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000acc:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <HAL_GPIO_Init+0x2bc>)
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	220f      	movs	r2, #15
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a40      	ldr	r2, [pc, #256]	; (8000bf4 <HAL_GPIO_Init+0x2c0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d013      	beq.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a3f      	ldr	r2, [pc, #252]	; (8000bf8 <HAL_GPIO_Init+0x2c4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d00d      	beq.n	8000b1c <HAL_GPIO_Init+0x1e8>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a3e      	ldr	r2, [pc, #248]	; (8000bfc <HAL_GPIO_Init+0x2c8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d007      	beq.n	8000b18 <HAL_GPIO_Init+0x1e4>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a3d      	ldr	r2, [pc, #244]	; (8000c00 <HAL_GPIO_Init+0x2cc>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d101      	bne.n	8000b14 <HAL_GPIO_Init+0x1e0>
 8000b10:	2303      	movs	r3, #3
 8000b12:	e006      	b.n	8000b22 <HAL_GPIO_Init+0x1ee>
 8000b14:	2304      	movs	r3, #4
 8000b16:	e004      	b.n	8000b22 <HAL_GPIO_Init+0x1ee>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e002      	b.n	8000b22 <HAL_GPIO_Init+0x1ee>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <HAL_GPIO_Init+0x1ee>
 8000b20:	2300      	movs	r3, #0
 8000b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b24:	f002 0203 	and.w	r2, r2, #3
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	4093      	lsls	r3, r2
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b32:	492f      	ldr	r1, [pc, #188]	; (8000bf0 <HAL_GPIO_Init+0x2bc>)
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	492c      	ldr	r1, [pc, #176]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	608b      	str	r3, [r1, #8]
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	4928      	ldr	r1, [pc, #160]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b74:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	4922      	ldr	r1, [pc, #136]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60cb      	str	r3, [r1, #12]
 8000b80:	e006      	b.n	8000b90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	491e      	ldr	r1, [pc, #120]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	4918      	ldr	r1, [pc, #96]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	604b      	str	r3, [r1, #4]
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4914      	ldr	r1, [pc, #80]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d021      	beq.n	8000c08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	490e      	ldr	r1, [pc, #56]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	600b      	str	r3, [r1, #0]
 8000bd0:	e021      	b.n	8000c16 <HAL_GPIO_Init+0x2e2>
 8000bd2:	bf00      	nop
 8000bd4:	10320000 	.word	0x10320000
 8000bd8:	10310000 	.word	0x10310000
 8000bdc:	10220000 	.word	0x10220000
 8000be0:	10210000 	.word	0x10210000
 8000be4:	10120000 	.word	0x10120000
 8000be8:	10110000 	.word	0x10110000
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40010c00 	.word	0x40010c00
 8000bfc:	40011000 	.word	0x40011000
 8000c00:	40011400 	.word	0x40011400
 8000c04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_GPIO_Init+0x304>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	4909      	ldr	r1, [pc, #36]	; (8000c38 <HAL_GPIO_Init+0x304>)
 8000c12:	4013      	ands	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	3301      	adds	r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	fa22 f303 	lsr.w	r3, r2, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f47f ae8e 	bne.w	8000948 <HAL_GPIO_Init+0x14>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	372c      	adds	r7, #44	; 0x2c
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	40010400 	.word	0x40010400

08000c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e272      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 8087 	beq.w	8000d6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c5c:	4b92      	ldr	r3, [pc, #584]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d00c      	beq.n	8000c82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c68:	4b8f      	ldr	r3, [pc, #572]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d112      	bne.n	8000c9a <HAL_RCC_OscConfig+0x5e>
 8000c74:	4b8c      	ldr	r3, [pc, #560]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c80:	d10b      	bne.n	8000c9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c82:	4b89      	ldr	r3, [pc, #548]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d06c      	beq.n	8000d68 <HAL_RCC_OscConfig+0x12c>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d168      	bne.n	8000d68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e24c      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca2:	d106      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x76>
 8000ca4:	4b80      	ldr	r3, [pc, #512]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a7f      	ldr	r2, [pc, #508]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	e02e      	b.n	8000d10 <HAL_RCC_OscConfig+0xd4>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10c      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x98>
 8000cba:	4b7b      	ldr	r3, [pc, #492]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a7a      	ldr	r2, [pc, #488]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	4b78      	ldr	r3, [pc, #480]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a77      	ldr	r2, [pc, #476]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	e01d      	b.n	8000d10 <HAL_RCC_OscConfig+0xd4>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cdc:	d10c      	bne.n	8000cf8 <HAL_RCC_OscConfig+0xbc>
 8000cde:	4b72      	ldr	r3, [pc, #456]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a71      	ldr	r2, [pc, #452]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a6e      	ldr	r2, [pc, #440]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e00b      	b.n	8000d10 <HAL_RCC_OscConfig+0xd4>
 8000cf8:	4b6b      	ldr	r3, [pc, #428]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a6a      	ldr	r2, [pc, #424]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	4b68      	ldr	r3, [pc, #416]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a67      	ldr	r2, [pc, #412]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d013      	beq.n	8000d40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fcfa 	bl	8000710 <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fcf6 	bl	8000710 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	; 0x64
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e200      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d32:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f0      	beq.n	8000d20 <HAL_RCC_OscConfig+0xe4>
 8000d3e:	e014      	b.n	8000d6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d40:	f7ff fce6 	bl	8000710 <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff fce2 	bl	8000710 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	; 0x64
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e1ec      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5a:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f0      	bne.n	8000d48 <HAL_RCC_OscConfig+0x10c>
 8000d66:	e000      	b.n	8000d6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d063      	beq.n	8000e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d76:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00b      	beq.n	8000d9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d82:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d11c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x18c>
 8000d8e:	4b46      	ldr	r3, [pc, #280]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d116      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9a:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <HAL_RCC_OscConfig+0x176>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d001      	beq.n	8000db2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e1c0      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	4939      	ldr	r1, [pc, #228]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc6:	e03a      	b.n	8000e3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d020      	beq.n	8000e12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd0:	4b36      	ldr	r3, [pc, #216]	; (8000eac <HAL_RCC_OscConfig+0x270>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fc9b 	bl	8000710 <HAL_GetTick>
 8000dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dde:	f7ff fc97 	bl	8000710 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e1a1      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4927      	ldr	r1, [pc, #156]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	600b      	str	r3, [r1, #0]
 8000e10:	e015      	b.n	8000e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_RCC_OscConfig+0x270>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fc7a 	bl	8000710 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e20:	f7ff fc76 	bl	8000710 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e180      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f0      	bne.n	8000e20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d03a      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d019      	beq.n	8000e86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_RCC_OscConfig+0x274>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fc5a 	bl	8000710 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff fc56 	bl	8000710 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e160      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 fa9c 	bl	80013bc <RCC_Delay>
 8000e84:	e01c      	b.n	8000ec0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_RCC_OscConfig+0x274>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8c:	f7ff fc40 	bl	8000710 <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e92:	e00f      	b.n	8000eb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e94:	f7ff fc3c 	bl	8000710 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d908      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e146      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	42420000 	.word	0x42420000
 8000eb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb4:	4b92      	ldr	r3, [pc, #584]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1e9      	bne.n	8000e94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80a6 	beq.w	800101a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed2:	4b8b      	ldr	r3, [pc, #556]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10d      	bne.n	8000efa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b88      	ldr	r3, [pc, #544]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a87      	ldr	r2, [pc, #540]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b85      	ldr	r3, [pc, #532]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efa:	4b82      	ldr	r3, [pc, #520]	; (8001104 <HAL_RCC_OscConfig+0x4c8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d118      	bne.n	8000f38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f06:	4b7f      	ldr	r3, [pc, #508]	; (8001104 <HAL_RCC_OscConfig+0x4c8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a7e      	ldr	r2, [pc, #504]	; (8001104 <HAL_RCC_OscConfig+0x4c8>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fbfd 	bl	8000710 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1a:	f7ff fbf9 	bl	8000710 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b64      	cmp	r3, #100	; 0x64
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e103      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2c:	4b75      	ldr	r3, [pc, #468]	; (8001104 <HAL_RCC_OscConfig+0x4c8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f0      	beq.n	8000f1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d106      	bne.n	8000f4e <HAL_RCC_OscConfig+0x312>
 8000f40:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4a6e      	ldr	r2, [pc, #440]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6213      	str	r3, [r2, #32]
 8000f4c:	e02d      	b.n	8000faa <HAL_RCC_OscConfig+0x36e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x334>
 8000f56:	4b6a      	ldr	r3, [pc, #424]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	4a69      	ldr	r2, [pc, #420]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	f023 0301 	bic.w	r3, r3, #1
 8000f60:	6213      	str	r3, [r2, #32]
 8000f62:	4b67      	ldr	r3, [pc, #412]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	4a66      	ldr	r2, [pc, #408]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	f023 0304 	bic.w	r3, r3, #4
 8000f6c:	6213      	str	r3, [r2, #32]
 8000f6e:	e01c      	b.n	8000faa <HAL_RCC_OscConfig+0x36e>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b05      	cmp	r3, #5
 8000f76:	d10c      	bne.n	8000f92 <HAL_RCC_OscConfig+0x356>
 8000f78:	4b61      	ldr	r3, [pc, #388]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4a60      	ldr	r2, [pc, #384]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6213      	str	r3, [r2, #32]
 8000f84:	4b5e      	ldr	r3, [pc, #376]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	4a5d      	ldr	r2, [pc, #372]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6213      	str	r3, [r2, #32]
 8000f90:	e00b      	b.n	8000faa <HAL_RCC_OscConfig+0x36e>
 8000f92:	4b5b      	ldr	r3, [pc, #364]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4a5a      	ldr	r2, [pc, #360]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	6213      	str	r3, [r2, #32]
 8000f9e:	4b58      	ldr	r3, [pc, #352]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	4a57      	ldr	r2, [pc, #348]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	f023 0304 	bic.w	r3, r3, #4
 8000fa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d015      	beq.n	8000fde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fbad 	bl	8000710 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fba:	f7ff fba9 	bl	8000710 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e0b1      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd0:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0ee      	beq.n	8000fba <HAL_RCC_OscConfig+0x37e>
 8000fdc:	e014      	b.n	8001008 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fb97 	bl	8000710 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fb93 	bl	8000710 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e09b      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffc:	4b40      	ldr	r3, [pc, #256]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ee      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d105      	bne.n	800101a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100e:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a3b      	ldr	r2, [pc, #236]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8087 	beq.w	8001132 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	2b08      	cmp	r3, #8
 800102e:	d061      	beq.n	80010f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d146      	bne.n	80010c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001038:	4b33      	ldr	r3, [pc, #204]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fb67 	bl	8000710 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff fb63 	bl	8000710 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e06d      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f0      	bne.n	8001046 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d108      	bne.n	8001080 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	4921      	ldr	r1, [pc, #132]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a19      	ldr	r1, [r3, #32]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	430b      	orrs	r3, r1
 8001092:	491b      	ldr	r1, [pc, #108]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fb37 	bl	8000710 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a6:	f7ff fb33 	bl	8000710 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e03d      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x46a>
 80010c4:	e035      	b.n	8001132 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_RCC_OscConfig+0x4cc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fb20 	bl	8000710 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d4:	f7ff fb1c 	bl	8000710 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e026      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x498>
 80010f2:	e01e      	b.n	8001132 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d107      	bne.n	800110c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e019      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
 8001100:	40021000 	.word	0x40021000
 8001104:	40007000 	.word	0x40007000
 8001108:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_RCC_OscConfig+0x500>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	429a      	cmp	r2, r3
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112a:	429a      	cmp	r2, r3
 800112c:	d001      	beq.n	8001132 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0d0      	b.n	80012f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4b6a      	ldr	r3, [pc, #424]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d910      	bls.n	8001184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b67      	ldr	r3, [pc, #412]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 0207 	bic.w	r2, r3, #7
 800116a:	4965      	ldr	r1, [pc, #404]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001172:	4b63      	ldr	r3, [pc, #396]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d001      	beq.n	8001184 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e0b8      	b.n	80012f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d020      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800119c:	4b59      	ldr	r3, [pc, #356]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a58      	ldr	r2, [pc, #352]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b4:	4b53      	ldr	r3, [pc, #332]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c0:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	494d      	ldr	r1, [pc, #308]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d040      	beq.n	8001260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d107      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	4b47      	ldr	r3, [pc, #284]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d115      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e07f      	b.n	80012f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fe:	4b41      	ldr	r3, [pc, #260]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e073      	b.n	80012f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e06b      	b.n	80012f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f023 0203 	bic.w	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	4936      	ldr	r1, [pc, #216]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	4313      	orrs	r3, r2
 800122e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001230:	f7ff fa6e 	bl	8000710 <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	e00a      	b.n	800124e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001238:	f7ff fa6a 	bl	8000710 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e053      	b.n	80012f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 020c 	and.w	r2, r3, #12
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d1eb      	bne.n	8001238 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d210      	bcs.n	8001290 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 0207 	bic.w	r2, r3, #7
 8001276:	4922      	ldr	r1, [pc, #136]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e032      	b.n	80012f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	4916      	ldr	r1, [pc, #88]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d009      	beq.n	80012ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	490e      	ldr	r1, [pc, #56]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ce:	f000 f821 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	490a      	ldr	r1, [pc, #40]	; (8001308 <HAL_RCC_ClockConfig+0x1c8>)
 80012e0:	5ccb      	ldrb	r3, [r1, r3]
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <HAL_RCC_ClockConfig+0x1cc>)
 80012e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_RCC_ClockConfig+0x1d0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f9cc 	bl	800068c <HAL_InitTick>

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000
 8001304:	40021000 	.word	0x40021000
 8001308:	08002e40 	.word	0x08002e40
 800130c:	20000060 	.word	0x20000060
 8001310:	20000064 	.word	0x20000064

08001314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b04      	cmp	r3, #4
 800133c:	d002      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0x30>
 800133e:	2b08      	cmp	r3, #8
 8001340:	d003      	beq.n	800134a <HAL_RCC_GetSysClockFreq+0x36>
 8001342:	e027      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001346:	613b      	str	r3, [r7, #16]
      break;
 8001348:	e027      	b.n	800139a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	0c9b      	lsrs	r3, r3, #18
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001354:	5cd3      	ldrb	r3, [r2, r3]
 8001356:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d010      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	0c5b      	lsrs	r3, r3, #17
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001376:	fb03 f202 	mul.w	r2, r3, r2
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e004      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	613b      	str	r3, [r7, #16]
      break;
 8001392:	e002      	b.n	800139a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001396:	613b      	str	r3, [r7, #16]
      break;
 8001398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800139a:	693b      	ldr	r3, [r7, #16]
}
 800139c:	4618      	mov	r0, r3
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	007a1200 	.word	0x007a1200
 80013b0:	08002e50 	.word	0x08002e50
 80013b4:	08002e60 	.word	0x08002e60
 80013b8:	003d0900 	.word	0x003d0900

080013bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <RCC_Delay+0x34>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <RCC_Delay+0x38>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0a5b      	lsrs	r3, r3, #9
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013d8:	bf00      	nop
  }
  while (Delay --);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	60fa      	str	r2, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f9      	bne.n	80013d8 <RCC_Delay+0x1c>
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000060 	.word	0x20000060
 80013f4:	10624dd3 	.word	0x10624dd3

080013f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e041      	b.n	800148e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f839 	bl	8001496 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f000 fab2 	bl	80019a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e041      	b.n	800153e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7fe ff88 	bl	80003e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3304      	adds	r3, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f000 fa5a 	bl	80019a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <HAL_TIM_PWM_Start+0x24>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b01      	cmp	r3, #1
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	e022      	b.n	80015b2 <HAL_TIM_PWM_Start+0x6a>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b04      	cmp	r3, #4
 8001570:	d109      	bne.n	8001586 <HAL_TIM_PWM_Start+0x3e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b01      	cmp	r3, #1
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	e015      	b.n	80015b2 <HAL_TIM_PWM_Start+0x6a>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b08      	cmp	r3, #8
 800158a:	d109      	bne.n	80015a0 <HAL_TIM_PWM_Start+0x58>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	bf14      	ite	ne
 8001598:	2301      	movne	r3, #1
 800159a:	2300      	moveq	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e008      	b.n	80015b2 <HAL_TIM_PWM_Start+0x6a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	bf14      	ite	ne
 80015ac:	2301      	movne	r3, #1
 80015ae:	2300      	moveq	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e05e      	b.n	8001678 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d104      	bne.n	80015ca <HAL_TIM_PWM_Start+0x82>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015c8:	e013      	b.n	80015f2 <HAL_TIM_PWM_Start+0xaa>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d104      	bne.n	80015da <HAL_TIM_PWM_Start+0x92>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015d8:	e00b      	b.n	80015f2 <HAL_TIM_PWM_Start+0xaa>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d104      	bne.n	80015ea <HAL_TIM_PWM_Start+0xa2>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015e8:	e003      	b.n	80015f2 <HAL_TIM_PWM_Start+0xaa>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2202      	movs	r2, #2
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	6839      	ldr	r1, [r7, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fc50 	bl	8001ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_TIM_PWM_Start+0x138>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d107      	bne.n	800161a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_TIM_PWM_Start+0x138>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00e      	beq.n	8001642 <HAL_TIM_PWM_Start+0xfa>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162c:	d009      	beq.n	8001642 <HAL_TIM_PWM_Start+0xfa>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_TIM_PWM_Start+0x13c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d004      	beq.n	8001642 <HAL_TIM_PWM_Start+0xfa>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <HAL_TIM_PWM_Start+0x140>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d111      	bne.n	8001666 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b06      	cmp	r3, #6
 8001652:	d010      	beq.n	8001676 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001664:	e007      	b.n	8001676 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40000400 	.word	0x40000400
 8001688:	40000800 	.word	0x40000800

0800168c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e0ae      	b.n	8001808 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	f200 809f 	bhi.w	80017f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80016ba:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016f5 	.word	0x080016f5
 80016c4:	080017f9 	.word	0x080017f9
 80016c8:	080017f9 	.word	0x080017f9
 80016cc:	080017f9 	.word	0x080017f9
 80016d0:	08001735 	.word	0x08001735
 80016d4:	080017f9 	.word	0x080017f9
 80016d8:	080017f9 	.word	0x080017f9
 80016dc:	080017f9 	.word	0x080017f9
 80016e0:	08001777 	.word	0x08001777
 80016e4:	080017f9 	.word	0x080017f9
 80016e8:	080017f9 	.word	0x080017f9
 80016ec:	080017f9 	.word	0x080017f9
 80016f0:	080017b7 	.word	0x080017b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f9b2 	bl	8001a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0208 	orr.w	r2, r2, #8
 800170e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0204 	bic.w	r2, r2, #4
 800171e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6999      	ldr	r1, [r3, #24]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	619a      	str	r2, [r3, #24]
      break;
 8001732:	e064      	b.n	80017fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f9f8 	bl	8001b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6999      	ldr	r1, [r3, #24]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	021a      	lsls	r2, r3, #8
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	619a      	str	r2, [r3, #24]
      break;
 8001774:	e043      	b.n	80017fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fa41 	bl	8001c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0208 	orr.w	r2, r2, #8
 8001790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0204 	bic.w	r2, r2, #4
 80017a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	69d9      	ldr	r1, [r3, #28]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	61da      	str	r2, [r3, #28]
      break;
 80017b4:	e023      	b.n	80017fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68b9      	ldr	r1, [r7, #8]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fa8b 	bl	8001cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69da      	ldr	r2, [r3, #28]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69d9      	ldr	r1, [r3, #28]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	021a      	lsls	r2, r3, #8
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	61da      	str	r2, [r3, #28]
      break;
 80017f6:	e002      	b.n	80017fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	75fb      	strb	r3, [r7, #23]
      break;
 80017fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001806:	7dfb      	ldrb	r3, [r7, #23]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_TIM_ConfigClockSource+0x1c>
 8001828:	2302      	movs	r3, #2
 800182a:	e0b4      	b.n	8001996 <HAL_TIM_ConfigClockSource+0x186>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800184a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001864:	d03e      	beq.n	80018e4 <HAL_TIM_ConfigClockSource+0xd4>
 8001866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800186a:	f200 8087 	bhi.w	800197c <HAL_TIM_ConfigClockSource+0x16c>
 800186e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001872:	f000 8086 	beq.w	8001982 <HAL_TIM_ConfigClockSource+0x172>
 8001876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187a:	d87f      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x16c>
 800187c:	2b70      	cmp	r3, #112	; 0x70
 800187e:	d01a      	beq.n	80018b6 <HAL_TIM_ConfigClockSource+0xa6>
 8001880:	2b70      	cmp	r3, #112	; 0x70
 8001882:	d87b      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x16c>
 8001884:	2b60      	cmp	r3, #96	; 0x60
 8001886:	d050      	beq.n	800192a <HAL_TIM_ConfigClockSource+0x11a>
 8001888:	2b60      	cmp	r3, #96	; 0x60
 800188a:	d877      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x16c>
 800188c:	2b50      	cmp	r3, #80	; 0x50
 800188e:	d03c      	beq.n	800190a <HAL_TIM_ConfigClockSource+0xfa>
 8001890:	2b50      	cmp	r3, #80	; 0x50
 8001892:	d873      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x16c>
 8001894:	2b40      	cmp	r3, #64	; 0x40
 8001896:	d058      	beq.n	800194a <HAL_TIM_ConfigClockSource+0x13a>
 8001898:	2b40      	cmp	r3, #64	; 0x40
 800189a:	d86f      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x16c>
 800189c:	2b30      	cmp	r3, #48	; 0x30
 800189e:	d064      	beq.n	800196a <HAL_TIM_ConfigClockSource+0x15a>
 80018a0:	2b30      	cmp	r3, #48	; 0x30
 80018a2:	d86b      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x16c>
 80018a4:	2b20      	cmp	r3, #32
 80018a6:	d060      	beq.n	800196a <HAL_TIM_ConfigClockSource+0x15a>
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d867      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x16c>
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d05c      	beq.n	800196a <HAL_TIM_ConfigClockSource+0x15a>
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d05a      	beq.n	800196a <HAL_TIM_ConfigClockSource+0x15a>
 80018b4:	e062      	b.n	800197c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80018c6:	f000 facc 	bl	8001e62 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80018d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	609a      	str	r2, [r3, #8]
      break;
 80018e2:	e04f      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80018f4:	f000 fab5 	bl	8001e62 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001906:	609a      	str	r2, [r3, #8]
      break;
 8001908:	e03c      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001916:	461a      	mov	r2, r3
 8001918:	f000 fa2c 	bl	8001d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2150      	movs	r1, #80	; 0x50
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fa83 	bl	8001e2e <TIM_ITRx_SetConfig>
      break;
 8001928:	e02c      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001936:	461a      	mov	r2, r3
 8001938:	f000 fa4a 	bl	8001dd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2160      	movs	r1, #96	; 0x60
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fa73 	bl	8001e2e <TIM_ITRx_SetConfig>
      break;
 8001948:	e01c      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001956:	461a      	mov	r2, r3
 8001958:	f000 fa0c 	bl	8001d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2140      	movs	r1, #64	; 0x40
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fa63 	bl	8001e2e <TIM_ITRx_SetConfig>
      break;
 8001968:	e00c      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f000 fa5a 	bl	8001e2e <TIM_ITRx_SetConfig>
      break;
 800197a:	e003      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
      break;
 8001980:	e000      	b.n	8001984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <TIM_Base_SetConfig+0xb8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d00b      	beq.n	80019d0 <TIM_Base_SetConfig+0x30>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019be:	d007      	beq.n	80019d0 <TIM_Base_SetConfig+0x30>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <TIM_Base_SetConfig+0xbc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d003      	beq.n	80019d0 <TIM_Base_SetConfig+0x30>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <TIM_Base_SetConfig+0xc0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d108      	bne.n	80019e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <TIM_Base_SetConfig+0xb8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00b      	beq.n	8001a02 <TIM_Base_SetConfig+0x62>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d007      	beq.n	8001a02 <TIM_Base_SetConfig+0x62>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <TIM_Base_SetConfig+0xbc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d003      	beq.n	8001a02 <TIM_Base_SetConfig+0x62>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <TIM_Base_SetConfig+0xc0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d108      	bne.n	8001a14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <TIM_Base_SetConfig+0xb8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d103      	bne.n	8001a48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	615a      	str	r2, [r3, #20]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40000800 	.word	0x40000800

08001a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f023 0201 	bic.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f023 0303 	bic.w	r3, r3, #3
 8001a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f023 0302 	bic.w	r3, r3, #2
 8001aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <TIM_OC1_SetConfig+0xc8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d10c      	bne.n	8001ada <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f023 0308 	bic.w	r3, r3, #8
 8001ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <TIM_OC1_SetConfig+0xc8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d111      	bne.n	8001b06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	621a      	str	r2, [r3, #32]
}
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40012c00 	.word	0x40012c00

08001b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f023 0210 	bic.w	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f023 0320 	bic.w	r3, r3, #32
 8001b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <TIM_OC2_SetConfig+0xd0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d10d      	bne.n	8001bac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001baa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <TIM_OC2_SetConfig+0xd0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d113      	bne.n	8001bdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	621a      	str	r2, [r3, #32]
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40012c00 	.word	0x40012c00

08001c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <TIM_OC3_SetConfig+0xd0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10d      	bne.n	8001c7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <TIM_OC3_SetConfig+0xd0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d113      	bne.n	8001cae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	621a      	str	r2, [r3, #32]
}
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00

08001cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	031b      	lsls	r3, r3, #12
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <TIM_OC4_SetConfig+0x98>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d109      	bne.n	8001d4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	019b      	lsls	r3, r3, #6
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	621a      	str	r2, [r3, #32]
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40012c00 	.word	0x40012c00

08001d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	f023 0201 	bic.w	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f023 030a 	bic.w	r3, r3, #10
 8001db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	621a      	str	r2, [r3, #32]
}
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	f023 0210 	bic.w	r2, r3, #16
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	031b      	lsls	r3, r3, #12
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	621a      	str	r2, [r3, #32]
}
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f043 0307 	orr.w	r3, r3, #7
 8001e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	021a      	lsls	r2, r3, #8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	609a      	str	r2, [r3, #8]
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	621a      	str	r2, [r3, #32]
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e046      	b.n	8001f8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00e      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4c:	d009      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10c      	bne.n	8001f7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	40012c00 	.word	0x40012c00
 8001f9c:	40000400 	.word	0x40000400
 8001fa0:	40000800 	.word	0x40000800

08001fa4 <std>:
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	4604      	mov	r4, r0
 8001faa:	e9c0 3300 	strd	r3, r3, [r0]
 8001fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001fb2:	6083      	str	r3, [r0, #8]
 8001fb4:	8181      	strh	r1, [r0, #12]
 8001fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8001fb8:	81c2      	strh	r2, [r0, #14]
 8001fba:	6183      	str	r3, [r0, #24]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	305c      	adds	r0, #92	; 0x5c
 8001fc2:	f000 f906 	bl	80021d2 <memset>
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <std+0x58>)
 8001fc8:	6224      	str	r4, [r4, #32]
 8001fca:	6263      	str	r3, [r4, #36]	; 0x24
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <std+0x5c>)
 8001fce:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <std+0x60>)
 8001fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <std+0x64>)
 8001fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <std+0x68>)
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	d006      	beq.n	8001fec <std+0x48>
 8001fde:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001fe2:	4294      	cmp	r4, r2
 8001fe4:	d002      	beq.n	8001fec <std+0x48>
 8001fe6:	33d0      	adds	r3, #208	; 0xd0
 8001fe8:	429c      	cmp	r4, r3
 8001fea:	d105      	bne.n	8001ff8 <std+0x54>
 8001fec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ff4:	f000 b966 	b.w	80022c4 <__retarget_lock_init_recursive>
 8001ff8:	bd10      	pop	{r4, pc}
 8001ffa:	bf00      	nop
 8001ffc:	0800214d 	.word	0x0800214d
 8002000:	0800216f 	.word	0x0800216f
 8002004:	080021a7 	.word	0x080021a7
 8002008:	080021cb 	.word	0x080021cb
 800200c:	20000134 	.word	0x20000134

08002010 <stdio_exit_handler>:
 8002010:	4a02      	ldr	r2, [pc, #8]	; (800201c <stdio_exit_handler+0xc>)
 8002012:	4903      	ldr	r1, [pc, #12]	; (8002020 <stdio_exit_handler+0x10>)
 8002014:	4803      	ldr	r0, [pc, #12]	; (8002024 <stdio_exit_handler+0x14>)
 8002016:	f000 b869 	b.w	80020ec <_fwalk_sglue>
 800201a:	bf00      	nop
 800201c:	2000006c 	.word	0x2000006c
 8002020:	08002b65 	.word	0x08002b65
 8002024:	20000078 	.word	0x20000078

08002028 <cleanup_stdio>:
 8002028:	6841      	ldr	r1, [r0, #4]
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <cleanup_stdio+0x34>)
 800202c:	b510      	push	{r4, lr}
 800202e:	4299      	cmp	r1, r3
 8002030:	4604      	mov	r4, r0
 8002032:	d001      	beq.n	8002038 <cleanup_stdio+0x10>
 8002034:	f000 fd96 	bl	8002b64 <_fflush_r>
 8002038:	68a1      	ldr	r1, [r4, #8]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <cleanup_stdio+0x38>)
 800203c:	4299      	cmp	r1, r3
 800203e:	d002      	beq.n	8002046 <cleanup_stdio+0x1e>
 8002040:	4620      	mov	r0, r4
 8002042:	f000 fd8f 	bl	8002b64 <_fflush_r>
 8002046:	68e1      	ldr	r1, [r4, #12]
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <cleanup_stdio+0x3c>)
 800204a:	4299      	cmp	r1, r3
 800204c:	d004      	beq.n	8002058 <cleanup_stdio+0x30>
 800204e:	4620      	mov	r0, r4
 8002050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002054:	f000 bd86 	b.w	8002b64 <_fflush_r>
 8002058:	bd10      	pop	{r4, pc}
 800205a:	bf00      	nop
 800205c:	20000134 	.word	0x20000134
 8002060:	2000019c 	.word	0x2000019c
 8002064:	20000204 	.word	0x20000204

08002068 <global_stdio_init.part.0>:
 8002068:	b510      	push	{r4, lr}
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <global_stdio_init.part.0+0x30>)
 800206c:	4c0b      	ldr	r4, [pc, #44]	; (800209c <global_stdio_init.part.0+0x34>)
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <global_stdio_init.part.0+0x38>)
 8002070:	4620      	mov	r0, r4
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	2104      	movs	r1, #4
 8002076:	2200      	movs	r2, #0
 8002078:	f7ff ff94 	bl	8001fa4 <std>
 800207c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002080:	2201      	movs	r2, #1
 8002082:	2109      	movs	r1, #9
 8002084:	f7ff ff8e 	bl	8001fa4 <std>
 8002088:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800208c:	2202      	movs	r2, #2
 800208e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002092:	2112      	movs	r1, #18
 8002094:	f7ff bf86 	b.w	8001fa4 <std>
 8002098:	2000026c 	.word	0x2000026c
 800209c:	20000134 	.word	0x20000134
 80020a0:	08002011 	.word	0x08002011

080020a4 <__sfp_lock_acquire>:
 80020a4:	4801      	ldr	r0, [pc, #4]	; (80020ac <__sfp_lock_acquire+0x8>)
 80020a6:	f000 b90e 	b.w	80022c6 <__retarget_lock_acquire_recursive>
 80020aa:	bf00      	nop
 80020ac:	20000275 	.word	0x20000275

080020b0 <__sfp_lock_release>:
 80020b0:	4801      	ldr	r0, [pc, #4]	; (80020b8 <__sfp_lock_release+0x8>)
 80020b2:	f000 b909 	b.w	80022c8 <__retarget_lock_release_recursive>
 80020b6:	bf00      	nop
 80020b8:	20000275 	.word	0x20000275

080020bc <__sinit>:
 80020bc:	b510      	push	{r4, lr}
 80020be:	4604      	mov	r4, r0
 80020c0:	f7ff fff0 	bl	80020a4 <__sfp_lock_acquire>
 80020c4:	6a23      	ldr	r3, [r4, #32]
 80020c6:	b11b      	cbz	r3, 80020d0 <__sinit+0x14>
 80020c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020cc:	f7ff bff0 	b.w	80020b0 <__sfp_lock_release>
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <__sinit+0x28>)
 80020d2:	6223      	str	r3, [r4, #32]
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__sinit+0x2c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f5      	bne.n	80020c8 <__sinit+0xc>
 80020dc:	f7ff ffc4 	bl	8002068 <global_stdio_init.part.0>
 80020e0:	e7f2      	b.n	80020c8 <__sinit+0xc>
 80020e2:	bf00      	nop
 80020e4:	08002029 	.word	0x08002029
 80020e8:	2000026c 	.word	0x2000026c

080020ec <_fwalk_sglue>:
 80020ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020f0:	4607      	mov	r7, r0
 80020f2:	4688      	mov	r8, r1
 80020f4:	4614      	mov	r4, r2
 80020f6:	2600      	movs	r6, #0
 80020f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020fc:	f1b9 0901 	subs.w	r9, r9, #1
 8002100:	d505      	bpl.n	800210e <_fwalk_sglue+0x22>
 8002102:	6824      	ldr	r4, [r4, #0]
 8002104:	2c00      	cmp	r4, #0
 8002106:	d1f7      	bne.n	80020f8 <_fwalk_sglue+0xc>
 8002108:	4630      	mov	r0, r6
 800210a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800210e:	89ab      	ldrh	r3, [r5, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d907      	bls.n	8002124 <_fwalk_sglue+0x38>
 8002114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002118:	3301      	adds	r3, #1
 800211a:	d003      	beq.n	8002124 <_fwalk_sglue+0x38>
 800211c:	4629      	mov	r1, r5
 800211e:	4638      	mov	r0, r7
 8002120:	47c0      	blx	r8
 8002122:	4306      	orrs	r6, r0
 8002124:	3568      	adds	r5, #104	; 0x68
 8002126:	e7e9      	b.n	80020fc <_fwalk_sglue+0x10>

08002128 <iprintf>:
 8002128:	b40f      	push	{r0, r1, r2, r3}
 800212a:	b507      	push	{r0, r1, r2, lr}
 800212c:	4906      	ldr	r1, [pc, #24]	; (8002148 <iprintf+0x20>)
 800212e:	ab04      	add	r3, sp, #16
 8002130:	6808      	ldr	r0, [r1, #0]
 8002132:	f853 2b04 	ldr.w	r2, [r3], #4
 8002136:	6881      	ldr	r1, [r0, #8]
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	f000 f9e3 	bl	8002504 <_vfiprintf_r>
 800213e:	b003      	add	sp, #12
 8002140:	f85d eb04 	ldr.w	lr, [sp], #4
 8002144:	b004      	add	sp, #16
 8002146:	4770      	bx	lr
 8002148:	200000c4 	.word	0x200000c4

0800214c <__sread>:
 800214c:	b510      	push	{r4, lr}
 800214e:	460c      	mov	r4, r1
 8002150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002154:	f000 f868 	bl	8002228 <_read_r>
 8002158:	2800      	cmp	r0, #0
 800215a:	bfab      	itete	ge
 800215c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800215e:	89a3      	ldrhlt	r3, [r4, #12]
 8002160:	181b      	addge	r3, r3, r0
 8002162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002166:	bfac      	ite	ge
 8002168:	6563      	strge	r3, [r4, #84]	; 0x54
 800216a:	81a3      	strhlt	r3, [r4, #12]
 800216c:	bd10      	pop	{r4, pc}

0800216e <__swrite>:
 800216e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002172:	461f      	mov	r7, r3
 8002174:	898b      	ldrh	r3, [r1, #12]
 8002176:	4605      	mov	r5, r0
 8002178:	05db      	lsls	r3, r3, #23
 800217a:	460c      	mov	r4, r1
 800217c:	4616      	mov	r6, r2
 800217e:	d505      	bpl.n	800218c <__swrite+0x1e>
 8002180:	2302      	movs	r3, #2
 8002182:	2200      	movs	r2, #0
 8002184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002188:	f000 f83c 	bl	8002204 <_lseek_r>
 800218c:	89a3      	ldrh	r3, [r4, #12]
 800218e:	4632      	mov	r2, r6
 8002190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002194:	81a3      	strh	r3, [r4, #12]
 8002196:	4628      	mov	r0, r5
 8002198:	463b      	mov	r3, r7
 800219a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800219e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021a2:	f000 b853 	b.w	800224c <_write_r>

080021a6 <__sseek>:
 80021a6:	b510      	push	{r4, lr}
 80021a8:	460c      	mov	r4, r1
 80021aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ae:	f000 f829 	bl	8002204 <_lseek_r>
 80021b2:	1c43      	adds	r3, r0, #1
 80021b4:	89a3      	ldrh	r3, [r4, #12]
 80021b6:	bf15      	itete	ne
 80021b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80021ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021c2:	81a3      	strheq	r3, [r4, #12]
 80021c4:	bf18      	it	ne
 80021c6:	81a3      	strhne	r3, [r4, #12]
 80021c8:	bd10      	pop	{r4, pc}

080021ca <__sclose>:
 80021ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ce:	f000 b809 	b.w	80021e4 <_close_r>

080021d2 <memset>:
 80021d2:	4603      	mov	r3, r0
 80021d4:	4402      	add	r2, r0
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d100      	bne.n	80021dc <memset+0xa>
 80021da:	4770      	bx	lr
 80021dc:	f803 1b01 	strb.w	r1, [r3], #1
 80021e0:	e7f9      	b.n	80021d6 <memset+0x4>
	...

080021e4 <_close_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	2300      	movs	r3, #0
 80021e8:	4d05      	ldr	r5, [pc, #20]	; (8002200 <_close_r+0x1c>)
 80021ea:	4604      	mov	r4, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	602b      	str	r3, [r5, #0]
 80021f0:	f7fe f9a4 	bl	800053c <_close>
 80021f4:	1c43      	adds	r3, r0, #1
 80021f6:	d102      	bne.n	80021fe <_close_r+0x1a>
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	b103      	cbz	r3, 80021fe <_close_r+0x1a>
 80021fc:	6023      	str	r3, [r4, #0]
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
 8002200:	20000270 	.word	0x20000270

08002204 <_lseek_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	2200      	movs	r2, #0
 800220e:	4d05      	ldr	r5, [pc, #20]	; (8002224 <_lseek_r+0x20>)
 8002210:	602a      	str	r2, [r5, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	f7fe f9b6 	bl	8000584 <_lseek>
 8002218:	1c43      	adds	r3, r0, #1
 800221a:	d102      	bne.n	8002222 <_lseek_r+0x1e>
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	b103      	cbz	r3, 8002222 <_lseek_r+0x1e>
 8002220:	6023      	str	r3, [r4, #0]
 8002222:	bd38      	pop	{r3, r4, r5, pc}
 8002224:	20000270 	.word	0x20000270

08002228 <_read_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4604      	mov	r4, r0
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	2200      	movs	r2, #0
 8002232:	4d05      	ldr	r5, [pc, #20]	; (8002248 <_read_r+0x20>)
 8002234:	602a      	str	r2, [r5, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	f7fe f947 	bl	80004ca <_read>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_read_r+0x1e>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_read_r+0x1e>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000270 	.word	0x20000270

0800224c <_write_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4604      	mov	r4, r0
 8002250:	4608      	mov	r0, r1
 8002252:	4611      	mov	r1, r2
 8002254:	2200      	movs	r2, #0
 8002256:	4d05      	ldr	r5, [pc, #20]	; (800226c <_write_r+0x20>)
 8002258:	602a      	str	r2, [r5, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f7fe f952 	bl	8000504 <_write>
 8002260:	1c43      	adds	r3, r0, #1
 8002262:	d102      	bne.n	800226a <_write_r+0x1e>
 8002264:	682b      	ldr	r3, [r5, #0]
 8002266:	b103      	cbz	r3, 800226a <_write_r+0x1e>
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	bd38      	pop	{r3, r4, r5, pc}
 800226c:	20000270 	.word	0x20000270

08002270 <__errno>:
 8002270:	4b01      	ldr	r3, [pc, #4]	; (8002278 <__errno+0x8>)
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	200000c4 	.word	0x200000c4

0800227c <__libc_init_array>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2600      	movs	r6, #0
 8002280:	4d0c      	ldr	r5, [pc, #48]	; (80022b4 <__libc_init_array+0x38>)
 8002282:	4c0d      	ldr	r4, [pc, #52]	; (80022b8 <__libc_init_array+0x3c>)
 8002284:	1b64      	subs	r4, r4, r5
 8002286:	10a4      	asrs	r4, r4, #2
 8002288:	42a6      	cmp	r6, r4
 800228a:	d109      	bne.n	80022a0 <__libc_init_array+0x24>
 800228c:	f000 fdca 	bl	8002e24 <_init>
 8002290:	2600      	movs	r6, #0
 8002292:	4d0a      	ldr	r5, [pc, #40]	; (80022bc <__libc_init_array+0x40>)
 8002294:	4c0a      	ldr	r4, [pc, #40]	; (80022c0 <__libc_init_array+0x44>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	42a6      	cmp	r6, r4
 800229c:	d105      	bne.n	80022aa <__libc_init_array+0x2e>
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a4:	4798      	blx	r3
 80022a6:	3601      	adds	r6, #1
 80022a8:	e7ee      	b.n	8002288 <__libc_init_array+0xc>
 80022aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ae:	4798      	blx	r3
 80022b0:	3601      	adds	r6, #1
 80022b2:	e7f2      	b.n	800229a <__libc_init_array+0x1e>
 80022b4:	08002e98 	.word	0x08002e98
 80022b8:	08002e98 	.word	0x08002e98
 80022bc:	08002e98 	.word	0x08002e98
 80022c0:	08002e9c 	.word	0x08002e9c

080022c4 <__retarget_lock_init_recursive>:
 80022c4:	4770      	bx	lr

080022c6 <__retarget_lock_acquire_recursive>:
 80022c6:	4770      	bx	lr

080022c8 <__retarget_lock_release_recursive>:
 80022c8:	4770      	bx	lr
	...

080022cc <_free_r>:
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	4605      	mov	r5, r0
 80022d0:	2900      	cmp	r1, #0
 80022d2:	d040      	beq.n	8002356 <_free_r+0x8a>
 80022d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022d8:	1f0c      	subs	r4, r1, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bfb8      	it	lt
 80022de:	18e4      	addlt	r4, r4, r3
 80022e0:	f000 f8dc 	bl	800249c <__malloc_lock>
 80022e4:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <_free_r+0x8c>)
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	b933      	cbnz	r3, 80022f8 <_free_r+0x2c>
 80022ea:	6063      	str	r3, [r4, #4]
 80022ec:	6014      	str	r4, [r2, #0]
 80022ee:	4628      	mov	r0, r5
 80022f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022f4:	f000 b8d8 	b.w	80024a8 <__malloc_unlock>
 80022f8:	42a3      	cmp	r3, r4
 80022fa:	d908      	bls.n	800230e <_free_r+0x42>
 80022fc:	6820      	ldr	r0, [r4, #0]
 80022fe:	1821      	adds	r1, r4, r0
 8002300:	428b      	cmp	r3, r1
 8002302:	bf01      	itttt	eq
 8002304:	6819      	ldreq	r1, [r3, #0]
 8002306:	685b      	ldreq	r3, [r3, #4]
 8002308:	1809      	addeq	r1, r1, r0
 800230a:	6021      	streq	r1, [r4, #0]
 800230c:	e7ed      	b.n	80022ea <_free_r+0x1e>
 800230e:	461a      	mov	r2, r3
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	b10b      	cbz	r3, 8002318 <_free_r+0x4c>
 8002314:	42a3      	cmp	r3, r4
 8002316:	d9fa      	bls.n	800230e <_free_r+0x42>
 8002318:	6811      	ldr	r1, [r2, #0]
 800231a:	1850      	adds	r0, r2, r1
 800231c:	42a0      	cmp	r0, r4
 800231e:	d10b      	bne.n	8002338 <_free_r+0x6c>
 8002320:	6820      	ldr	r0, [r4, #0]
 8002322:	4401      	add	r1, r0
 8002324:	1850      	adds	r0, r2, r1
 8002326:	4283      	cmp	r3, r0
 8002328:	6011      	str	r1, [r2, #0]
 800232a:	d1e0      	bne.n	80022ee <_free_r+0x22>
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4408      	add	r0, r1
 8002332:	6010      	str	r0, [r2, #0]
 8002334:	6053      	str	r3, [r2, #4]
 8002336:	e7da      	b.n	80022ee <_free_r+0x22>
 8002338:	d902      	bls.n	8002340 <_free_r+0x74>
 800233a:	230c      	movs	r3, #12
 800233c:	602b      	str	r3, [r5, #0]
 800233e:	e7d6      	b.n	80022ee <_free_r+0x22>
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	1821      	adds	r1, r4, r0
 8002344:	428b      	cmp	r3, r1
 8002346:	bf01      	itttt	eq
 8002348:	6819      	ldreq	r1, [r3, #0]
 800234a:	685b      	ldreq	r3, [r3, #4]
 800234c:	1809      	addeq	r1, r1, r0
 800234e:	6021      	streq	r1, [r4, #0]
 8002350:	6063      	str	r3, [r4, #4]
 8002352:	6054      	str	r4, [r2, #4]
 8002354:	e7cb      	b.n	80022ee <_free_r+0x22>
 8002356:	bd38      	pop	{r3, r4, r5, pc}
 8002358:	20000278 	.word	0x20000278

0800235c <sbrk_aligned>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	4e0e      	ldr	r6, [pc, #56]	; (8002398 <sbrk_aligned+0x3c>)
 8002360:	460c      	mov	r4, r1
 8002362:	6831      	ldr	r1, [r6, #0]
 8002364:	4605      	mov	r5, r0
 8002366:	b911      	cbnz	r1, 800236e <sbrk_aligned+0x12>
 8002368:	f000 fcba 	bl	8002ce0 <_sbrk_r>
 800236c:	6030      	str	r0, [r6, #0]
 800236e:	4621      	mov	r1, r4
 8002370:	4628      	mov	r0, r5
 8002372:	f000 fcb5 	bl	8002ce0 <_sbrk_r>
 8002376:	1c43      	adds	r3, r0, #1
 8002378:	d00a      	beq.n	8002390 <sbrk_aligned+0x34>
 800237a:	1cc4      	adds	r4, r0, #3
 800237c:	f024 0403 	bic.w	r4, r4, #3
 8002380:	42a0      	cmp	r0, r4
 8002382:	d007      	beq.n	8002394 <sbrk_aligned+0x38>
 8002384:	1a21      	subs	r1, r4, r0
 8002386:	4628      	mov	r0, r5
 8002388:	f000 fcaa 	bl	8002ce0 <_sbrk_r>
 800238c:	3001      	adds	r0, #1
 800238e:	d101      	bne.n	8002394 <sbrk_aligned+0x38>
 8002390:	f04f 34ff 	mov.w	r4, #4294967295
 8002394:	4620      	mov	r0, r4
 8002396:	bd70      	pop	{r4, r5, r6, pc}
 8002398:	2000027c 	.word	0x2000027c

0800239c <_malloc_r>:
 800239c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023a0:	1ccd      	adds	r5, r1, #3
 80023a2:	f025 0503 	bic.w	r5, r5, #3
 80023a6:	3508      	adds	r5, #8
 80023a8:	2d0c      	cmp	r5, #12
 80023aa:	bf38      	it	cc
 80023ac:	250c      	movcc	r5, #12
 80023ae:	2d00      	cmp	r5, #0
 80023b0:	4607      	mov	r7, r0
 80023b2:	db01      	blt.n	80023b8 <_malloc_r+0x1c>
 80023b4:	42a9      	cmp	r1, r5
 80023b6:	d905      	bls.n	80023c4 <_malloc_r+0x28>
 80023b8:	230c      	movs	r3, #12
 80023ba:	2600      	movs	r6, #0
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4630      	mov	r0, r6
 80023c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002498 <_malloc_r+0xfc>
 80023c8:	f000 f868 	bl	800249c <__malloc_lock>
 80023cc:	f8d8 3000 	ldr.w	r3, [r8]
 80023d0:	461c      	mov	r4, r3
 80023d2:	bb5c      	cbnz	r4, 800242c <_malloc_r+0x90>
 80023d4:	4629      	mov	r1, r5
 80023d6:	4638      	mov	r0, r7
 80023d8:	f7ff ffc0 	bl	800235c <sbrk_aligned>
 80023dc:	1c43      	adds	r3, r0, #1
 80023de:	4604      	mov	r4, r0
 80023e0:	d155      	bne.n	800248e <_malloc_r+0xf2>
 80023e2:	f8d8 4000 	ldr.w	r4, [r8]
 80023e6:	4626      	mov	r6, r4
 80023e8:	2e00      	cmp	r6, #0
 80023ea:	d145      	bne.n	8002478 <_malloc_r+0xdc>
 80023ec:	2c00      	cmp	r4, #0
 80023ee:	d048      	beq.n	8002482 <_malloc_r+0xe6>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	4631      	mov	r1, r6
 80023f4:	4638      	mov	r0, r7
 80023f6:	eb04 0903 	add.w	r9, r4, r3
 80023fa:	f000 fc71 	bl	8002ce0 <_sbrk_r>
 80023fe:	4581      	cmp	r9, r0
 8002400:	d13f      	bne.n	8002482 <_malloc_r+0xe6>
 8002402:	6821      	ldr	r1, [r4, #0]
 8002404:	4638      	mov	r0, r7
 8002406:	1a6d      	subs	r5, r5, r1
 8002408:	4629      	mov	r1, r5
 800240a:	f7ff ffa7 	bl	800235c <sbrk_aligned>
 800240e:	3001      	adds	r0, #1
 8002410:	d037      	beq.n	8002482 <_malloc_r+0xe6>
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	442b      	add	r3, r5
 8002416:	6023      	str	r3, [r4, #0]
 8002418:	f8d8 3000 	ldr.w	r3, [r8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d038      	beq.n	8002492 <_malloc_r+0xf6>
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	42a2      	cmp	r2, r4
 8002424:	d12b      	bne.n	800247e <_malloc_r+0xe2>
 8002426:	2200      	movs	r2, #0
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	e00f      	b.n	800244c <_malloc_r+0xb0>
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	1b52      	subs	r2, r2, r5
 8002430:	d41f      	bmi.n	8002472 <_malloc_r+0xd6>
 8002432:	2a0b      	cmp	r2, #11
 8002434:	d917      	bls.n	8002466 <_malloc_r+0xca>
 8002436:	1961      	adds	r1, r4, r5
 8002438:	42a3      	cmp	r3, r4
 800243a:	6025      	str	r5, [r4, #0]
 800243c:	bf18      	it	ne
 800243e:	6059      	strne	r1, [r3, #4]
 8002440:	6863      	ldr	r3, [r4, #4]
 8002442:	bf08      	it	eq
 8002444:	f8c8 1000 	streq.w	r1, [r8]
 8002448:	5162      	str	r2, [r4, r5]
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	4638      	mov	r0, r7
 800244e:	f104 060b 	add.w	r6, r4, #11
 8002452:	f000 f829 	bl	80024a8 <__malloc_unlock>
 8002456:	f026 0607 	bic.w	r6, r6, #7
 800245a:	1d23      	adds	r3, r4, #4
 800245c:	1af2      	subs	r2, r6, r3
 800245e:	d0ae      	beq.n	80023be <_malloc_r+0x22>
 8002460:	1b9b      	subs	r3, r3, r6
 8002462:	50a3      	str	r3, [r4, r2]
 8002464:	e7ab      	b.n	80023be <_malloc_r+0x22>
 8002466:	42a3      	cmp	r3, r4
 8002468:	6862      	ldr	r2, [r4, #4]
 800246a:	d1dd      	bne.n	8002428 <_malloc_r+0x8c>
 800246c:	f8c8 2000 	str.w	r2, [r8]
 8002470:	e7ec      	b.n	800244c <_malloc_r+0xb0>
 8002472:	4623      	mov	r3, r4
 8002474:	6864      	ldr	r4, [r4, #4]
 8002476:	e7ac      	b.n	80023d2 <_malloc_r+0x36>
 8002478:	4634      	mov	r4, r6
 800247a:	6876      	ldr	r6, [r6, #4]
 800247c:	e7b4      	b.n	80023e8 <_malloc_r+0x4c>
 800247e:	4613      	mov	r3, r2
 8002480:	e7cc      	b.n	800241c <_malloc_r+0x80>
 8002482:	230c      	movs	r3, #12
 8002484:	4638      	mov	r0, r7
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	f000 f80e 	bl	80024a8 <__malloc_unlock>
 800248c:	e797      	b.n	80023be <_malloc_r+0x22>
 800248e:	6025      	str	r5, [r4, #0]
 8002490:	e7dc      	b.n	800244c <_malloc_r+0xb0>
 8002492:	605b      	str	r3, [r3, #4]
 8002494:	deff      	udf	#255	; 0xff
 8002496:	bf00      	nop
 8002498:	20000278 	.word	0x20000278

0800249c <__malloc_lock>:
 800249c:	4801      	ldr	r0, [pc, #4]	; (80024a4 <__malloc_lock+0x8>)
 800249e:	f7ff bf12 	b.w	80022c6 <__retarget_lock_acquire_recursive>
 80024a2:	bf00      	nop
 80024a4:	20000274 	.word	0x20000274

080024a8 <__malloc_unlock>:
 80024a8:	4801      	ldr	r0, [pc, #4]	; (80024b0 <__malloc_unlock+0x8>)
 80024aa:	f7ff bf0d 	b.w	80022c8 <__retarget_lock_release_recursive>
 80024ae:	bf00      	nop
 80024b0:	20000274 	.word	0x20000274

080024b4 <__sfputc_r>:
 80024b4:	6893      	ldr	r3, [r2, #8]
 80024b6:	b410      	push	{r4}
 80024b8:	3b01      	subs	r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	6093      	str	r3, [r2, #8]
 80024be:	da07      	bge.n	80024d0 <__sfputc_r+0x1c>
 80024c0:	6994      	ldr	r4, [r2, #24]
 80024c2:	42a3      	cmp	r3, r4
 80024c4:	db01      	blt.n	80024ca <__sfputc_r+0x16>
 80024c6:	290a      	cmp	r1, #10
 80024c8:	d102      	bne.n	80024d0 <__sfputc_r+0x1c>
 80024ca:	bc10      	pop	{r4}
 80024cc:	f000 bb72 	b.w	8002bb4 <__swbuf_r>
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	1c58      	adds	r0, r3, #1
 80024d4:	6010      	str	r0, [r2, #0]
 80024d6:	7019      	strb	r1, [r3, #0]
 80024d8:	4608      	mov	r0, r1
 80024da:	bc10      	pop	{r4}
 80024dc:	4770      	bx	lr

080024de <__sfputs_r>:
 80024de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e0:	4606      	mov	r6, r0
 80024e2:	460f      	mov	r7, r1
 80024e4:	4614      	mov	r4, r2
 80024e6:	18d5      	adds	r5, r2, r3
 80024e8:	42ac      	cmp	r4, r5
 80024ea:	d101      	bne.n	80024f0 <__sfputs_r+0x12>
 80024ec:	2000      	movs	r0, #0
 80024ee:	e007      	b.n	8002500 <__sfputs_r+0x22>
 80024f0:	463a      	mov	r2, r7
 80024f2:	4630      	mov	r0, r6
 80024f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024f8:	f7ff ffdc 	bl	80024b4 <__sfputc_r>
 80024fc:	1c43      	adds	r3, r0, #1
 80024fe:	d1f3      	bne.n	80024e8 <__sfputs_r+0xa>
 8002500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002504 <_vfiprintf_r>:
 8002504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002508:	460d      	mov	r5, r1
 800250a:	4614      	mov	r4, r2
 800250c:	4698      	mov	r8, r3
 800250e:	4606      	mov	r6, r0
 8002510:	b09d      	sub	sp, #116	; 0x74
 8002512:	b118      	cbz	r0, 800251c <_vfiprintf_r+0x18>
 8002514:	6a03      	ldr	r3, [r0, #32]
 8002516:	b90b      	cbnz	r3, 800251c <_vfiprintf_r+0x18>
 8002518:	f7ff fdd0 	bl	80020bc <__sinit>
 800251c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800251e:	07d9      	lsls	r1, r3, #31
 8002520:	d405      	bmi.n	800252e <_vfiprintf_r+0x2a>
 8002522:	89ab      	ldrh	r3, [r5, #12]
 8002524:	059a      	lsls	r2, r3, #22
 8002526:	d402      	bmi.n	800252e <_vfiprintf_r+0x2a>
 8002528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800252a:	f7ff fecc 	bl	80022c6 <__retarget_lock_acquire_recursive>
 800252e:	89ab      	ldrh	r3, [r5, #12]
 8002530:	071b      	lsls	r3, r3, #28
 8002532:	d501      	bpl.n	8002538 <_vfiprintf_r+0x34>
 8002534:	692b      	ldr	r3, [r5, #16]
 8002536:	b99b      	cbnz	r3, 8002560 <_vfiprintf_r+0x5c>
 8002538:	4629      	mov	r1, r5
 800253a:	4630      	mov	r0, r6
 800253c:	f000 fb78 	bl	8002c30 <__swsetup_r>
 8002540:	b170      	cbz	r0, 8002560 <_vfiprintf_r+0x5c>
 8002542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002544:	07dc      	lsls	r4, r3, #31
 8002546:	d504      	bpl.n	8002552 <_vfiprintf_r+0x4e>
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	b01d      	add	sp, #116	; 0x74
 800254e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002552:	89ab      	ldrh	r3, [r5, #12]
 8002554:	0598      	lsls	r0, r3, #22
 8002556:	d4f7      	bmi.n	8002548 <_vfiprintf_r+0x44>
 8002558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800255a:	f7ff feb5 	bl	80022c8 <__retarget_lock_release_recursive>
 800255e:	e7f3      	b.n	8002548 <_vfiprintf_r+0x44>
 8002560:	2300      	movs	r3, #0
 8002562:	9309      	str	r3, [sp, #36]	; 0x24
 8002564:	2320      	movs	r3, #32
 8002566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800256a:	2330      	movs	r3, #48	; 0x30
 800256c:	f04f 0901 	mov.w	r9, #1
 8002570:	f8cd 800c 	str.w	r8, [sp, #12]
 8002574:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002724 <_vfiprintf_r+0x220>
 8002578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800257c:	4623      	mov	r3, r4
 800257e:	469a      	mov	sl, r3
 8002580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002584:	b10a      	cbz	r2, 800258a <_vfiprintf_r+0x86>
 8002586:	2a25      	cmp	r2, #37	; 0x25
 8002588:	d1f9      	bne.n	800257e <_vfiprintf_r+0x7a>
 800258a:	ebba 0b04 	subs.w	fp, sl, r4
 800258e:	d00b      	beq.n	80025a8 <_vfiprintf_r+0xa4>
 8002590:	465b      	mov	r3, fp
 8002592:	4622      	mov	r2, r4
 8002594:	4629      	mov	r1, r5
 8002596:	4630      	mov	r0, r6
 8002598:	f7ff ffa1 	bl	80024de <__sfputs_r>
 800259c:	3001      	adds	r0, #1
 800259e:	f000 80a9 	beq.w	80026f4 <_vfiprintf_r+0x1f0>
 80025a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025a4:	445a      	add	r2, fp
 80025a6:	9209      	str	r2, [sp, #36]	; 0x24
 80025a8:	f89a 3000 	ldrb.w	r3, [sl]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a1 	beq.w	80026f4 <_vfiprintf_r+0x1f0>
 80025b2:	2300      	movs	r3, #0
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025bc:	f10a 0a01 	add.w	sl, sl, #1
 80025c0:	9304      	str	r3, [sp, #16]
 80025c2:	9307      	str	r3, [sp, #28]
 80025c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025c8:	931a      	str	r3, [sp, #104]	; 0x68
 80025ca:	4654      	mov	r4, sl
 80025cc:	2205      	movs	r2, #5
 80025ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025d2:	4854      	ldr	r0, [pc, #336]	; (8002724 <_vfiprintf_r+0x220>)
 80025d4:	f000 fb94 	bl	8002d00 <memchr>
 80025d8:	9a04      	ldr	r2, [sp, #16]
 80025da:	b9d8      	cbnz	r0, 8002614 <_vfiprintf_r+0x110>
 80025dc:	06d1      	lsls	r1, r2, #27
 80025de:	bf44      	itt	mi
 80025e0:	2320      	movmi	r3, #32
 80025e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025e6:	0713      	lsls	r3, r2, #28
 80025e8:	bf44      	itt	mi
 80025ea:	232b      	movmi	r3, #43	; 0x2b
 80025ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025f0:	f89a 3000 	ldrb.w	r3, [sl]
 80025f4:	2b2a      	cmp	r3, #42	; 0x2a
 80025f6:	d015      	beq.n	8002624 <_vfiprintf_r+0x120>
 80025f8:	4654      	mov	r4, sl
 80025fa:	2000      	movs	r0, #0
 80025fc:	f04f 0c0a 	mov.w	ip, #10
 8002600:	9a07      	ldr	r2, [sp, #28]
 8002602:	4621      	mov	r1, r4
 8002604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002608:	3b30      	subs	r3, #48	; 0x30
 800260a:	2b09      	cmp	r3, #9
 800260c:	d94d      	bls.n	80026aa <_vfiprintf_r+0x1a6>
 800260e:	b1b0      	cbz	r0, 800263e <_vfiprintf_r+0x13a>
 8002610:	9207      	str	r2, [sp, #28]
 8002612:	e014      	b.n	800263e <_vfiprintf_r+0x13a>
 8002614:	eba0 0308 	sub.w	r3, r0, r8
 8002618:	fa09 f303 	lsl.w	r3, r9, r3
 800261c:	4313      	orrs	r3, r2
 800261e:	46a2      	mov	sl, r4
 8002620:	9304      	str	r3, [sp, #16]
 8002622:	e7d2      	b.n	80025ca <_vfiprintf_r+0xc6>
 8002624:	9b03      	ldr	r3, [sp, #12]
 8002626:	1d19      	adds	r1, r3, #4
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	9103      	str	r1, [sp, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	bfbb      	ittet	lt
 8002630:	425b      	neglt	r3, r3
 8002632:	f042 0202 	orrlt.w	r2, r2, #2
 8002636:	9307      	strge	r3, [sp, #28]
 8002638:	9307      	strlt	r3, [sp, #28]
 800263a:	bfb8      	it	lt
 800263c:	9204      	strlt	r2, [sp, #16]
 800263e:	7823      	ldrb	r3, [r4, #0]
 8002640:	2b2e      	cmp	r3, #46	; 0x2e
 8002642:	d10c      	bne.n	800265e <_vfiprintf_r+0x15a>
 8002644:	7863      	ldrb	r3, [r4, #1]
 8002646:	2b2a      	cmp	r3, #42	; 0x2a
 8002648:	d134      	bne.n	80026b4 <_vfiprintf_r+0x1b0>
 800264a:	9b03      	ldr	r3, [sp, #12]
 800264c:	3402      	adds	r4, #2
 800264e:	1d1a      	adds	r2, r3, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	9203      	str	r2, [sp, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	bfb8      	it	lt
 8002658:	f04f 33ff 	movlt.w	r3, #4294967295
 800265c:	9305      	str	r3, [sp, #20]
 800265e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002728 <_vfiprintf_r+0x224>
 8002662:	2203      	movs	r2, #3
 8002664:	4650      	mov	r0, sl
 8002666:	7821      	ldrb	r1, [r4, #0]
 8002668:	f000 fb4a 	bl	8002d00 <memchr>
 800266c:	b138      	cbz	r0, 800267e <_vfiprintf_r+0x17a>
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	9b04      	ldr	r3, [sp, #16]
 8002672:	eba0 000a 	sub.w	r0, r0, sl
 8002676:	4082      	lsls	r2, r0
 8002678:	4313      	orrs	r3, r2
 800267a:	3401      	adds	r4, #1
 800267c:	9304      	str	r3, [sp, #16]
 800267e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002682:	2206      	movs	r2, #6
 8002684:	4829      	ldr	r0, [pc, #164]	; (800272c <_vfiprintf_r+0x228>)
 8002686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800268a:	f000 fb39 	bl	8002d00 <memchr>
 800268e:	2800      	cmp	r0, #0
 8002690:	d03f      	beq.n	8002712 <_vfiprintf_r+0x20e>
 8002692:	4b27      	ldr	r3, [pc, #156]	; (8002730 <_vfiprintf_r+0x22c>)
 8002694:	bb1b      	cbnz	r3, 80026de <_vfiprintf_r+0x1da>
 8002696:	9b03      	ldr	r3, [sp, #12]
 8002698:	3307      	adds	r3, #7
 800269a:	f023 0307 	bic.w	r3, r3, #7
 800269e:	3308      	adds	r3, #8
 80026a0:	9303      	str	r3, [sp, #12]
 80026a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026a4:	443b      	add	r3, r7
 80026a6:	9309      	str	r3, [sp, #36]	; 0x24
 80026a8:	e768      	b.n	800257c <_vfiprintf_r+0x78>
 80026aa:	460c      	mov	r4, r1
 80026ac:	2001      	movs	r0, #1
 80026ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80026b2:	e7a6      	b.n	8002602 <_vfiprintf_r+0xfe>
 80026b4:	2300      	movs	r3, #0
 80026b6:	f04f 0c0a 	mov.w	ip, #10
 80026ba:	4619      	mov	r1, r3
 80026bc:	3401      	adds	r4, #1
 80026be:	9305      	str	r3, [sp, #20]
 80026c0:	4620      	mov	r0, r4
 80026c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026c6:	3a30      	subs	r2, #48	; 0x30
 80026c8:	2a09      	cmp	r2, #9
 80026ca:	d903      	bls.n	80026d4 <_vfiprintf_r+0x1d0>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0c6      	beq.n	800265e <_vfiprintf_r+0x15a>
 80026d0:	9105      	str	r1, [sp, #20]
 80026d2:	e7c4      	b.n	800265e <_vfiprintf_r+0x15a>
 80026d4:	4604      	mov	r4, r0
 80026d6:	2301      	movs	r3, #1
 80026d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80026dc:	e7f0      	b.n	80026c0 <_vfiprintf_r+0x1bc>
 80026de:	ab03      	add	r3, sp, #12
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	462a      	mov	r2, r5
 80026e4:	4630      	mov	r0, r6
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <_vfiprintf_r+0x230>)
 80026e8:	a904      	add	r1, sp, #16
 80026ea:	f3af 8000 	nop.w
 80026ee:	4607      	mov	r7, r0
 80026f0:	1c78      	adds	r0, r7, #1
 80026f2:	d1d6      	bne.n	80026a2 <_vfiprintf_r+0x19e>
 80026f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026f6:	07d9      	lsls	r1, r3, #31
 80026f8:	d405      	bmi.n	8002706 <_vfiprintf_r+0x202>
 80026fa:	89ab      	ldrh	r3, [r5, #12]
 80026fc:	059a      	lsls	r2, r3, #22
 80026fe:	d402      	bmi.n	8002706 <_vfiprintf_r+0x202>
 8002700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002702:	f7ff fde1 	bl	80022c8 <__retarget_lock_release_recursive>
 8002706:	89ab      	ldrh	r3, [r5, #12]
 8002708:	065b      	lsls	r3, r3, #25
 800270a:	f53f af1d 	bmi.w	8002548 <_vfiprintf_r+0x44>
 800270e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002710:	e71c      	b.n	800254c <_vfiprintf_r+0x48>
 8002712:	ab03      	add	r3, sp, #12
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	462a      	mov	r2, r5
 8002718:	4630      	mov	r0, r6
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <_vfiprintf_r+0x230>)
 800271c:	a904      	add	r1, sp, #16
 800271e:	f000 f87d 	bl	800281c <_printf_i>
 8002722:	e7e4      	b.n	80026ee <_vfiprintf_r+0x1ea>
 8002724:	08002e62 	.word	0x08002e62
 8002728:	08002e68 	.word	0x08002e68
 800272c:	08002e6c 	.word	0x08002e6c
 8002730:	00000000 	.word	0x00000000
 8002734:	080024df 	.word	0x080024df

08002738 <_printf_common>:
 8002738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800273c:	4616      	mov	r6, r2
 800273e:	4699      	mov	r9, r3
 8002740:	688a      	ldr	r2, [r1, #8]
 8002742:	690b      	ldr	r3, [r1, #16]
 8002744:	4607      	mov	r7, r0
 8002746:	4293      	cmp	r3, r2
 8002748:	bfb8      	it	lt
 800274a:	4613      	movlt	r3, r2
 800274c:	6033      	str	r3, [r6, #0]
 800274e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002752:	460c      	mov	r4, r1
 8002754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002758:	b10a      	cbz	r2, 800275e <_printf_common+0x26>
 800275a:	3301      	adds	r3, #1
 800275c:	6033      	str	r3, [r6, #0]
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	0699      	lsls	r1, r3, #26
 8002762:	bf42      	ittt	mi
 8002764:	6833      	ldrmi	r3, [r6, #0]
 8002766:	3302      	addmi	r3, #2
 8002768:	6033      	strmi	r3, [r6, #0]
 800276a:	6825      	ldr	r5, [r4, #0]
 800276c:	f015 0506 	ands.w	r5, r5, #6
 8002770:	d106      	bne.n	8002780 <_printf_common+0x48>
 8002772:	f104 0a19 	add.w	sl, r4, #25
 8002776:	68e3      	ldr	r3, [r4, #12]
 8002778:	6832      	ldr	r2, [r6, #0]
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	42ab      	cmp	r3, r5
 800277e:	dc2b      	bgt.n	80027d8 <_printf_common+0xa0>
 8002780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002784:	1e13      	subs	r3, r2, #0
 8002786:	6822      	ldr	r2, [r4, #0]
 8002788:	bf18      	it	ne
 800278a:	2301      	movne	r3, #1
 800278c:	0692      	lsls	r2, r2, #26
 800278e:	d430      	bmi.n	80027f2 <_printf_common+0xba>
 8002790:	4649      	mov	r1, r9
 8002792:	4638      	mov	r0, r7
 8002794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002798:	47c0      	blx	r8
 800279a:	3001      	adds	r0, #1
 800279c:	d023      	beq.n	80027e6 <_printf_common+0xae>
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	6922      	ldr	r2, [r4, #16]
 80027a2:	f003 0306 	and.w	r3, r3, #6
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	bf14      	ite	ne
 80027aa:	2500      	movne	r5, #0
 80027ac:	6833      	ldreq	r3, [r6, #0]
 80027ae:	f04f 0600 	mov.w	r6, #0
 80027b2:	bf08      	it	eq
 80027b4:	68e5      	ldreq	r5, [r4, #12]
 80027b6:	f104 041a 	add.w	r4, r4, #26
 80027ba:	bf08      	it	eq
 80027bc:	1aed      	subeq	r5, r5, r3
 80027be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027c2:	bf08      	it	eq
 80027c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bfc4      	itt	gt
 80027cc:	1a9b      	subgt	r3, r3, r2
 80027ce:	18ed      	addgt	r5, r5, r3
 80027d0:	42b5      	cmp	r5, r6
 80027d2:	d11a      	bne.n	800280a <_printf_common+0xd2>
 80027d4:	2000      	movs	r0, #0
 80027d6:	e008      	b.n	80027ea <_printf_common+0xb2>
 80027d8:	2301      	movs	r3, #1
 80027da:	4652      	mov	r2, sl
 80027dc:	4649      	mov	r1, r9
 80027de:	4638      	mov	r0, r7
 80027e0:	47c0      	blx	r8
 80027e2:	3001      	adds	r0, #1
 80027e4:	d103      	bne.n	80027ee <_printf_common+0xb6>
 80027e6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ee:	3501      	adds	r5, #1
 80027f0:	e7c1      	b.n	8002776 <_printf_common+0x3e>
 80027f2:	2030      	movs	r0, #48	; 0x30
 80027f4:	18e1      	adds	r1, r4, r3
 80027f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002800:	4422      	add	r2, r4
 8002802:	3302      	adds	r3, #2
 8002804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002808:	e7c2      	b.n	8002790 <_printf_common+0x58>
 800280a:	2301      	movs	r3, #1
 800280c:	4622      	mov	r2, r4
 800280e:	4649      	mov	r1, r9
 8002810:	4638      	mov	r0, r7
 8002812:	47c0      	blx	r8
 8002814:	3001      	adds	r0, #1
 8002816:	d0e6      	beq.n	80027e6 <_printf_common+0xae>
 8002818:	3601      	adds	r6, #1
 800281a:	e7d9      	b.n	80027d0 <_printf_common+0x98>

0800281c <_printf_i>:
 800281c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002820:	7e0f      	ldrb	r7, [r1, #24]
 8002822:	4691      	mov	r9, r2
 8002824:	2f78      	cmp	r7, #120	; 0x78
 8002826:	4680      	mov	r8, r0
 8002828:	460c      	mov	r4, r1
 800282a:	469a      	mov	sl, r3
 800282c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800282e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002832:	d807      	bhi.n	8002844 <_printf_i+0x28>
 8002834:	2f62      	cmp	r7, #98	; 0x62
 8002836:	d80a      	bhi.n	800284e <_printf_i+0x32>
 8002838:	2f00      	cmp	r7, #0
 800283a:	f000 80d5 	beq.w	80029e8 <_printf_i+0x1cc>
 800283e:	2f58      	cmp	r7, #88	; 0x58
 8002840:	f000 80c1 	beq.w	80029c6 <_printf_i+0x1aa>
 8002844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800284c:	e03a      	b.n	80028c4 <_printf_i+0xa8>
 800284e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002852:	2b15      	cmp	r3, #21
 8002854:	d8f6      	bhi.n	8002844 <_printf_i+0x28>
 8002856:	a101      	add	r1, pc, #4	; (adr r1, 800285c <_printf_i+0x40>)
 8002858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800285c:	080028b5 	.word	0x080028b5
 8002860:	080028c9 	.word	0x080028c9
 8002864:	08002845 	.word	0x08002845
 8002868:	08002845 	.word	0x08002845
 800286c:	08002845 	.word	0x08002845
 8002870:	08002845 	.word	0x08002845
 8002874:	080028c9 	.word	0x080028c9
 8002878:	08002845 	.word	0x08002845
 800287c:	08002845 	.word	0x08002845
 8002880:	08002845 	.word	0x08002845
 8002884:	08002845 	.word	0x08002845
 8002888:	080029cf 	.word	0x080029cf
 800288c:	080028f5 	.word	0x080028f5
 8002890:	08002989 	.word	0x08002989
 8002894:	08002845 	.word	0x08002845
 8002898:	08002845 	.word	0x08002845
 800289c:	080029f1 	.word	0x080029f1
 80028a0:	08002845 	.word	0x08002845
 80028a4:	080028f5 	.word	0x080028f5
 80028a8:	08002845 	.word	0x08002845
 80028ac:	08002845 	.word	0x08002845
 80028b0:	08002991 	.word	0x08002991
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	1d1a      	adds	r2, r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	602a      	str	r2, [r5, #0]
 80028bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0a0      	b.n	8002a0a <_printf_i+0x1ee>
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	682b      	ldr	r3, [r5, #0]
 80028cc:	0607      	lsls	r7, r0, #24
 80028ce:	f103 0104 	add.w	r1, r3, #4
 80028d2:	6029      	str	r1, [r5, #0]
 80028d4:	d501      	bpl.n	80028da <_printf_i+0xbe>
 80028d6:	681e      	ldr	r6, [r3, #0]
 80028d8:	e003      	b.n	80028e2 <_printf_i+0xc6>
 80028da:	0646      	lsls	r6, r0, #25
 80028dc:	d5fb      	bpl.n	80028d6 <_printf_i+0xba>
 80028de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80028e2:	2e00      	cmp	r6, #0
 80028e4:	da03      	bge.n	80028ee <_printf_i+0xd2>
 80028e6:	232d      	movs	r3, #45	; 0x2d
 80028e8:	4276      	negs	r6, r6
 80028ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ee:	230a      	movs	r3, #10
 80028f0:	4859      	ldr	r0, [pc, #356]	; (8002a58 <_printf_i+0x23c>)
 80028f2:	e012      	b.n	800291a <_printf_i+0xfe>
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	6820      	ldr	r0, [r4, #0]
 80028f8:	1d19      	adds	r1, r3, #4
 80028fa:	6029      	str	r1, [r5, #0]
 80028fc:	0605      	lsls	r5, r0, #24
 80028fe:	d501      	bpl.n	8002904 <_printf_i+0xe8>
 8002900:	681e      	ldr	r6, [r3, #0]
 8002902:	e002      	b.n	800290a <_printf_i+0xee>
 8002904:	0641      	lsls	r1, r0, #25
 8002906:	d5fb      	bpl.n	8002900 <_printf_i+0xe4>
 8002908:	881e      	ldrh	r6, [r3, #0]
 800290a:	2f6f      	cmp	r7, #111	; 0x6f
 800290c:	bf0c      	ite	eq
 800290e:	2308      	moveq	r3, #8
 8002910:	230a      	movne	r3, #10
 8002912:	4851      	ldr	r0, [pc, #324]	; (8002a58 <_printf_i+0x23c>)
 8002914:	2100      	movs	r1, #0
 8002916:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800291a:	6865      	ldr	r5, [r4, #4]
 800291c:	2d00      	cmp	r5, #0
 800291e:	bfa8      	it	ge
 8002920:	6821      	ldrge	r1, [r4, #0]
 8002922:	60a5      	str	r5, [r4, #8]
 8002924:	bfa4      	itt	ge
 8002926:	f021 0104 	bicge.w	r1, r1, #4
 800292a:	6021      	strge	r1, [r4, #0]
 800292c:	b90e      	cbnz	r6, 8002932 <_printf_i+0x116>
 800292e:	2d00      	cmp	r5, #0
 8002930:	d04b      	beq.n	80029ca <_printf_i+0x1ae>
 8002932:	4615      	mov	r5, r2
 8002934:	fbb6 f1f3 	udiv	r1, r6, r3
 8002938:	fb03 6711 	mls	r7, r3, r1, r6
 800293c:	5dc7      	ldrb	r7, [r0, r7]
 800293e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002942:	4637      	mov	r7, r6
 8002944:	42bb      	cmp	r3, r7
 8002946:	460e      	mov	r6, r1
 8002948:	d9f4      	bls.n	8002934 <_printf_i+0x118>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d10b      	bne.n	8002966 <_printf_i+0x14a>
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	07de      	lsls	r6, r3, #31
 8002952:	d508      	bpl.n	8002966 <_printf_i+0x14a>
 8002954:	6923      	ldr	r3, [r4, #16]
 8002956:	6861      	ldr	r1, [r4, #4]
 8002958:	4299      	cmp	r1, r3
 800295a:	bfde      	ittt	le
 800295c:	2330      	movle	r3, #48	; 0x30
 800295e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002962:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002966:	1b52      	subs	r2, r2, r5
 8002968:	6122      	str	r2, [r4, #16]
 800296a:	464b      	mov	r3, r9
 800296c:	4621      	mov	r1, r4
 800296e:	4640      	mov	r0, r8
 8002970:	f8cd a000 	str.w	sl, [sp]
 8002974:	aa03      	add	r2, sp, #12
 8002976:	f7ff fedf 	bl	8002738 <_printf_common>
 800297a:	3001      	adds	r0, #1
 800297c:	d14a      	bne.n	8002a14 <_printf_i+0x1f8>
 800297e:	f04f 30ff 	mov.w	r0, #4294967295
 8002982:	b004      	add	sp, #16
 8002984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	6023      	str	r3, [r4, #0]
 8002990:	2778      	movs	r7, #120	; 0x78
 8002992:	4832      	ldr	r0, [pc, #200]	; (8002a5c <_printf_i+0x240>)
 8002994:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	6829      	ldr	r1, [r5, #0]
 800299c:	061f      	lsls	r7, r3, #24
 800299e:	f851 6b04 	ldr.w	r6, [r1], #4
 80029a2:	d402      	bmi.n	80029aa <_printf_i+0x18e>
 80029a4:	065f      	lsls	r7, r3, #25
 80029a6:	bf48      	it	mi
 80029a8:	b2b6      	uxthmi	r6, r6
 80029aa:	07df      	lsls	r7, r3, #31
 80029ac:	bf48      	it	mi
 80029ae:	f043 0320 	orrmi.w	r3, r3, #32
 80029b2:	6029      	str	r1, [r5, #0]
 80029b4:	bf48      	it	mi
 80029b6:	6023      	strmi	r3, [r4, #0]
 80029b8:	b91e      	cbnz	r6, 80029c2 <_printf_i+0x1a6>
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	f023 0320 	bic.w	r3, r3, #32
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	2310      	movs	r3, #16
 80029c4:	e7a6      	b.n	8002914 <_printf_i+0xf8>
 80029c6:	4824      	ldr	r0, [pc, #144]	; (8002a58 <_printf_i+0x23c>)
 80029c8:	e7e4      	b.n	8002994 <_printf_i+0x178>
 80029ca:	4615      	mov	r5, r2
 80029cc:	e7bd      	b.n	800294a <_printf_i+0x12e>
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	6826      	ldr	r6, [r4, #0]
 80029d2:	1d18      	adds	r0, r3, #4
 80029d4:	6961      	ldr	r1, [r4, #20]
 80029d6:	6028      	str	r0, [r5, #0]
 80029d8:	0635      	lsls	r5, r6, #24
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	d501      	bpl.n	80029e2 <_printf_i+0x1c6>
 80029de:	6019      	str	r1, [r3, #0]
 80029e0:	e002      	b.n	80029e8 <_printf_i+0x1cc>
 80029e2:	0670      	lsls	r0, r6, #25
 80029e4:	d5fb      	bpl.n	80029de <_printf_i+0x1c2>
 80029e6:	8019      	strh	r1, [r3, #0]
 80029e8:	2300      	movs	r3, #0
 80029ea:	4615      	mov	r5, r2
 80029ec:	6123      	str	r3, [r4, #16]
 80029ee:	e7bc      	b.n	800296a <_printf_i+0x14e>
 80029f0:	682b      	ldr	r3, [r5, #0]
 80029f2:	2100      	movs	r1, #0
 80029f4:	1d1a      	adds	r2, r3, #4
 80029f6:	602a      	str	r2, [r5, #0]
 80029f8:	681d      	ldr	r5, [r3, #0]
 80029fa:	6862      	ldr	r2, [r4, #4]
 80029fc:	4628      	mov	r0, r5
 80029fe:	f000 f97f 	bl	8002d00 <memchr>
 8002a02:	b108      	cbz	r0, 8002a08 <_printf_i+0x1ec>
 8002a04:	1b40      	subs	r0, r0, r5
 8002a06:	6060      	str	r0, [r4, #4]
 8002a08:	6863      	ldr	r3, [r4, #4]
 8002a0a:	6123      	str	r3, [r4, #16]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a12:	e7aa      	b.n	800296a <_printf_i+0x14e>
 8002a14:	462a      	mov	r2, r5
 8002a16:	4649      	mov	r1, r9
 8002a18:	4640      	mov	r0, r8
 8002a1a:	6923      	ldr	r3, [r4, #16]
 8002a1c:	47d0      	blx	sl
 8002a1e:	3001      	adds	r0, #1
 8002a20:	d0ad      	beq.n	800297e <_printf_i+0x162>
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	079b      	lsls	r3, r3, #30
 8002a26:	d413      	bmi.n	8002a50 <_printf_i+0x234>
 8002a28:	68e0      	ldr	r0, [r4, #12]
 8002a2a:	9b03      	ldr	r3, [sp, #12]
 8002a2c:	4298      	cmp	r0, r3
 8002a2e:	bfb8      	it	lt
 8002a30:	4618      	movlt	r0, r3
 8002a32:	e7a6      	b.n	8002982 <_printf_i+0x166>
 8002a34:	2301      	movs	r3, #1
 8002a36:	4632      	mov	r2, r6
 8002a38:	4649      	mov	r1, r9
 8002a3a:	4640      	mov	r0, r8
 8002a3c:	47d0      	blx	sl
 8002a3e:	3001      	adds	r0, #1
 8002a40:	d09d      	beq.n	800297e <_printf_i+0x162>
 8002a42:	3501      	adds	r5, #1
 8002a44:	68e3      	ldr	r3, [r4, #12]
 8002a46:	9903      	ldr	r1, [sp, #12]
 8002a48:	1a5b      	subs	r3, r3, r1
 8002a4a:	42ab      	cmp	r3, r5
 8002a4c:	dcf2      	bgt.n	8002a34 <_printf_i+0x218>
 8002a4e:	e7eb      	b.n	8002a28 <_printf_i+0x20c>
 8002a50:	2500      	movs	r5, #0
 8002a52:	f104 0619 	add.w	r6, r4, #25
 8002a56:	e7f5      	b.n	8002a44 <_printf_i+0x228>
 8002a58:	08002e73 	.word	0x08002e73
 8002a5c:	08002e84 	.word	0x08002e84

08002a60 <__sflush_r>:
 8002a60:	898a      	ldrh	r2, [r1, #12]
 8002a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a64:	4605      	mov	r5, r0
 8002a66:	0710      	lsls	r0, r2, #28
 8002a68:	460c      	mov	r4, r1
 8002a6a:	d457      	bmi.n	8002b1c <__sflush_r+0xbc>
 8002a6c:	684b      	ldr	r3, [r1, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	dc04      	bgt.n	8002a7c <__sflush_r+0x1c>
 8002a72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dc01      	bgt.n	8002a7c <__sflush_r+0x1c>
 8002a78:	2000      	movs	r0, #0
 8002a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a7e:	2e00      	cmp	r6, #0
 8002a80:	d0fa      	beq.n	8002a78 <__sflush_r+0x18>
 8002a82:	2300      	movs	r3, #0
 8002a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a88:	682f      	ldr	r7, [r5, #0]
 8002a8a:	6a21      	ldr	r1, [r4, #32]
 8002a8c:	602b      	str	r3, [r5, #0]
 8002a8e:	d032      	beq.n	8002af6 <__sflush_r+0x96>
 8002a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a92:	89a3      	ldrh	r3, [r4, #12]
 8002a94:	075a      	lsls	r2, r3, #29
 8002a96:	d505      	bpl.n	8002aa4 <__sflush_r+0x44>
 8002a98:	6863      	ldr	r3, [r4, #4]
 8002a9a:	1ac0      	subs	r0, r0, r3
 8002a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a9e:	b10b      	cbz	r3, 8002aa4 <__sflush_r+0x44>
 8002aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002aa2:	1ac0      	subs	r0, r0, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002aaa:	4628      	mov	r0, r5
 8002aac:	6a21      	ldr	r1, [r4, #32]
 8002aae:	47b0      	blx	r6
 8002ab0:	1c43      	adds	r3, r0, #1
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	d106      	bne.n	8002ac4 <__sflush_r+0x64>
 8002ab6:	6829      	ldr	r1, [r5, #0]
 8002ab8:	291d      	cmp	r1, #29
 8002aba:	d82b      	bhi.n	8002b14 <__sflush_r+0xb4>
 8002abc:	4a28      	ldr	r2, [pc, #160]	; (8002b60 <__sflush_r+0x100>)
 8002abe:	410a      	asrs	r2, r1
 8002ac0:	07d6      	lsls	r6, r2, #31
 8002ac2:	d427      	bmi.n	8002b14 <__sflush_r+0xb4>
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	6062      	str	r2, [r4, #4]
 8002ac8:	6922      	ldr	r2, [r4, #16]
 8002aca:	04d9      	lsls	r1, r3, #19
 8002acc:	6022      	str	r2, [r4, #0]
 8002ace:	d504      	bpl.n	8002ada <__sflush_r+0x7a>
 8002ad0:	1c42      	adds	r2, r0, #1
 8002ad2:	d101      	bne.n	8002ad8 <__sflush_r+0x78>
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	b903      	cbnz	r3, 8002ada <__sflush_r+0x7a>
 8002ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8002ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002adc:	602f      	str	r7, [r5, #0]
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	d0ca      	beq.n	8002a78 <__sflush_r+0x18>
 8002ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ae6:	4299      	cmp	r1, r3
 8002ae8:	d002      	beq.n	8002af0 <__sflush_r+0x90>
 8002aea:	4628      	mov	r0, r5
 8002aec:	f7ff fbee 	bl	80022cc <_free_r>
 8002af0:	2000      	movs	r0, #0
 8002af2:	6360      	str	r0, [r4, #52]	; 0x34
 8002af4:	e7c1      	b.n	8002a7a <__sflush_r+0x1a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	4628      	mov	r0, r5
 8002afa:	47b0      	blx	r6
 8002afc:	1c41      	adds	r1, r0, #1
 8002afe:	d1c8      	bne.n	8002a92 <__sflush_r+0x32>
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0c5      	beq.n	8002a92 <__sflush_r+0x32>
 8002b06:	2b1d      	cmp	r3, #29
 8002b08:	d001      	beq.n	8002b0e <__sflush_r+0xae>
 8002b0a:	2b16      	cmp	r3, #22
 8002b0c:	d101      	bne.n	8002b12 <__sflush_r+0xb2>
 8002b0e:	602f      	str	r7, [r5, #0]
 8002b10:	e7b2      	b.n	8002a78 <__sflush_r+0x18>
 8002b12:	89a3      	ldrh	r3, [r4, #12]
 8002b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b18:	81a3      	strh	r3, [r4, #12]
 8002b1a:	e7ae      	b.n	8002a7a <__sflush_r+0x1a>
 8002b1c:	690f      	ldr	r7, [r1, #16]
 8002b1e:	2f00      	cmp	r7, #0
 8002b20:	d0aa      	beq.n	8002a78 <__sflush_r+0x18>
 8002b22:	0793      	lsls	r3, r2, #30
 8002b24:	bf18      	it	ne
 8002b26:	2300      	movne	r3, #0
 8002b28:	680e      	ldr	r6, [r1, #0]
 8002b2a:	bf08      	it	eq
 8002b2c:	694b      	ldreq	r3, [r1, #20]
 8002b2e:	1bf6      	subs	r6, r6, r7
 8002b30:	600f      	str	r7, [r1, #0]
 8002b32:	608b      	str	r3, [r1, #8]
 8002b34:	2e00      	cmp	r6, #0
 8002b36:	dd9f      	ble.n	8002a78 <__sflush_r+0x18>
 8002b38:	4633      	mov	r3, r6
 8002b3a:	463a      	mov	r2, r7
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	6a21      	ldr	r1, [r4, #32]
 8002b40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002b44:	47e0      	blx	ip
 8002b46:	2800      	cmp	r0, #0
 8002b48:	dc06      	bgt.n	8002b58 <__sflush_r+0xf8>
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b54:	81a3      	strh	r3, [r4, #12]
 8002b56:	e790      	b.n	8002a7a <__sflush_r+0x1a>
 8002b58:	4407      	add	r7, r0
 8002b5a:	1a36      	subs	r6, r6, r0
 8002b5c:	e7ea      	b.n	8002b34 <__sflush_r+0xd4>
 8002b5e:	bf00      	nop
 8002b60:	dfbffffe 	.word	0xdfbffffe

08002b64 <_fflush_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	690b      	ldr	r3, [r1, #16]
 8002b68:	4605      	mov	r5, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	b913      	cbnz	r3, 8002b74 <_fflush_r+0x10>
 8002b6e:	2500      	movs	r5, #0
 8002b70:	4628      	mov	r0, r5
 8002b72:	bd38      	pop	{r3, r4, r5, pc}
 8002b74:	b118      	cbz	r0, 8002b7e <_fflush_r+0x1a>
 8002b76:	6a03      	ldr	r3, [r0, #32]
 8002b78:	b90b      	cbnz	r3, 8002b7e <_fflush_r+0x1a>
 8002b7a:	f7ff fa9f 	bl	80020bc <__sinit>
 8002b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f3      	beq.n	8002b6e <_fflush_r+0xa>
 8002b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b88:	07d0      	lsls	r0, r2, #31
 8002b8a:	d404      	bmi.n	8002b96 <_fflush_r+0x32>
 8002b8c:	0599      	lsls	r1, r3, #22
 8002b8e:	d402      	bmi.n	8002b96 <_fflush_r+0x32>
 8002b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b92:	f7ff fb98 	bl	80022c6 <__retarget_lock_acquire_recursive>
 8002b96:	4628      	mov	r0, r5
 8002b98:	4621      	mov	r1, r4
 8002b9a:	f7ff ff61 	bl	8002a60 <__sflush_r>
 8002b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	07da      	lsls	r2, r3, #31
 8002ba4:	d4e4      	bmi.n	8002b70 <_fflush_r+0xc>
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	059b      	lsls	r3, r3, #22
 8002baa:	d4e1      	bmi.n	8002b70 <_fflush_r+0xc>
 8002bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bae:	f7ff fb8b 	bl	80022c8 <__retarget_lock_release_recursive>
 8002bb2:	e7dd      	b.n	8002b70 <_fflush_r+0xc>

08002bb4 <__swbuf_r>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	460e      	mov	r6, r1
 8002bb8:	4614      	mov	r4, r2
 8002bba:	4605      	mov	r5, r0
 8002bbc:	b118      	cbz	r0, 8002bc6 <__swbuf_r+0x12>
 8002bbe:	6a03      	ldr	r3, [r0, #32]
 8002bc0:	b90b      	cbnz	r3, 8002bc6 <__swbuf_r+0x12>
 8002bc2:	f7ff fa7b 	bl	80020bc <__sinit>
 8002bc6:	69a3      	ldr	r3, [r4, #24]
 8002bc8:	60a3      	str	r3, [r4, #8]
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	071a      	lsls	r2, r3, #28
 8002bce:	d525      	bpl.n	8002c1c <__swbuf_r+0x68>
 8002bd0:	6923      	ldr	r3, [r4, #16]
 8002bd2:	b31b      	cbz	r3, 8002c1c <__swbuf_r+0x68>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	6922      	ldr	r2, [r4, #16]
 8002bd8:	b2f6      	uxtb	r6, r6
 8002bda:	1a98      	subs	r0, r3, r2
 8002bdc:	6963      	ldr	r3, [r4, #20]
 8002bde:	4637      	mov	r7, r6
 8002be0:	4283      	cmp	r3, r0
 8002be2:	dc04      	bgt.n	8002bee <__swbuf_r+0x3a>
 8002be4:	4621      	mov	r1, r4
 8002be6:	4628      	mov	r0, r5
 8002be8:	f7ff ffbc 	bl	8002b64 <_fflush_r>
 8002bec:	b9e0      	cbnz	r0, 8002c28 <__swbuf_r+0x74>
 8002bee:	68a3      	ldr	r3, [r4, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60a3      	str	r3, [r4, #8]
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	6022      	str	r2, [r4, #0]
 8002bfa:	701e      	strb	r6, [r3, #0]
 8002bfc:	6962      	ldr	r2, [r4, #20]
 8002bfe:	1c43      	adds	r3, r0, #1
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d004      	beq.n	8002c0e <__swbuf_r+0x5a>
 8002c04:	89a3      	ldrh	r3, [r4, #12]
 8002c06:	07db      	lsls	r3, r3, #31
 8002c08:	d506      	bpl.n	8002c18 <__swbuf_r+0x64>
 8002c0a:	2e0a      	cmp	r6, #10
 8002c0c:	d104      	bne.n	8002c18 <__swbuf_r+0x64>
 8002c0e:	4621      	mov	r1, r4
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7ff ffa7 	bl	8002b64 <_fflush_r>
 8002c16:	b938      	cbnz	r0, 8002c28 <__swbuf_r+0x74>
 8002c18:	4638      	mov	r0, r7
 8002c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f000 f806 	bl	8002c30 <__swsetup_r>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d0d5      	beq.n	8002bd4 <__swbuf_r+0x20>
 8002c28:	f04f 37ff 	mov.w	r7, #4294967295
 8002c2c:	e7f4      	b.n	8002c18 <__swbuf_r+0x64>
	...

08002c30 <__swsetup_r>:
 8002c30:	b538      	push	{r3, r4, r5, lr}
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <__swsetup_r+0xac>)
 8002c34:	4605      	mov	r5, r0
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	460c      	mov	r4, r1
 8002c3a:	b118      	cbz	r0, 8002c44 <__swsetup_r+0x14>
 8002c3c:	6a03      	ldr	r3, [r0, #32]
 8002c3e:	b90b      	cbnz	r3, 8002c44 <__swsetup_r+0x14>
 8002c40:	f7ff fa3c 	bl	80020bc <__sinit>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c4a:	0718      	lsls	r0, r3, #28
 8002c4c:	d422      	bmi.n	8002c94 <__swsetup_r+0x64>
 8002c4e:	06d9      	lsls	r1, r3, #27
 8002c50:	d407      	bmi.n	8002c62 <__swsetup_r+0x32>
 8002c52:	2309      	movs	r3, #9
 8002c54:	602b      	str	r3, [r5, #0]
 8002c56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5e:	81a3      	strh	r3, [r4, #12]
 8002c60:	e034      	b.n	8002ccc <__swsetup_r+0x9c>
 8002c62:	0758      	lsls	r0, r3, #29
 8002c64:	d512      	bpl.n	8002c8c <__swsetup_r+0x5c>
 8002c66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c68:	b141      	cbz	r1, 8002c7c <__swsetup_r+0x4c>
 8002c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c6e:	4299      	cmp	r1, r3
 8002c70:	d002      	beq.n	8002c78 <__swsetup_r+0x48>
 8002c72:	4628      	mov	r0, r5
 8002c74:	f7ff fb2a 	bl	80022cc <_free_r>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	6363      	str	r3, [r4, #52]	; 0x34
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c82:	81a3      	strh	r3, [r4, #12]
 8002c84:	2300      	movs	r3, #0
 8002c86:	6063      	str	r3, [r4, #4]
 8002c88:	6923      	ldr	r3, [r4, #16]
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	89a3      	ldrh	r3, [r4, #12]
 8002c8e:	f043 0308 	orr.w	r3, r3, #8
 8002c92:	81a3      	strh	r3, [r4, #12]
 8002c94:	6923      	ldr	r3, [r4, #16]
 8002c96:	b94b      	cbnz	r3, 8002cac <__swsetup_r+0x7c>
 8002c98:	89a3      	ldrh	r3, [r4, #12]
 8002c9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca2:	d003      	beq.n	8002cac <__swsetup_r+0x7c>
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f000 f85d 	bl	8002d66 <__smakebuf_r>
 8002cac:	89a0      	ldrh	r0, [r4, #12]
 8002cae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cb2:	f010 0301 	ands.w	r3, r0, #1
 8002cb6:	d00a      	beq.n	8002cce <__swsetup_r+0x9e>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60a3      	str	r3, [r4, #8]
 8002cbc:	6963      	ldr	r3, [r4, #20]
 8002cbe:	425b      	negs	r3, r3
 8002cc0:	61a3      	str	r3, [r4, #24]
 8002cc2:	6923      	ldr	r3, [r4, #16]
 8002cc4:	b943      	cbnz	r3, 8002cd8 <__swsetup_r+0xa8>
 8002cc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cca:	d1c4      	bne.n	8002c56 <__swsetup_r+0x26>
 8002ccc:	bd38      	pop	{r3, r4, r5, pc}
 8002cce:	0781      	lsls	r1, r0, #30
 8002cd0:	bf58      	it	pl
 8002cd2:	6963      	ldrpl	r3, [r4, #20]
 8002cd4:	60a3      	str	r3, [r4, #8]
 8002cd6:	e7f4      	b.n	8002cc2 <__swsetup_r+0x92>
 8002cd8:	2000      	movs	r0, #0
 8002cda:	e7f7      	b.n	8002ccc <__swsetup_r+0x9c>
 8002cdc:	200000c4 	.word	0x200000c4

08002ce0 <_sbrk_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	4d05      	ldr	r5, [pc, #20]	; (8002cfc <_sbrk_r+0x1c>)
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	602b      	str	r3, [r5, #0]
 8002cec:	f7fd fc56 	bl	800059c <_sbrk>
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d102      	bne.n	8002cfa <_sbrk_r+0x1a>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	b103      	cbz	r3, 8002cfa <_sbrk_r+0x1a>
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
 8002cfc:	20000270 	.word	0x20000270

08002d00 <memchr>:
 8002d00:	4603      	mov	r3, r0
 8002d02:	b510      	push	{r4, lr}
 8002d04:	b2c9      	uxtb	r1, r1
 8002d06:	4402      	add	r2, r0
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	d101      	bne.n	8002d12 <memchr+0x12>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e003      	b.n	8002d1a <memchr+0x1a>
 8002d12:	7804      	ldrb	r4, [r0, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	428c      	cmp	r4, r1
 8002d18:	d1f6      	bne.n	8002d08 <memchr+0x8>
 8002d1a:	bd10      	pop	{r4, pc}

08002d1c <__swhatbuf_r>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	460c      	mov	r4, r1
 8002d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d24:	4615      	mov	r5, r2
 8002d26:	2900      	cmp	r1, #0
 8002d28:	461e      	mov	r6, r3
 8002d2a:	b096      	sub	sp, #88	; 0x58
 8002d2c:	da0c      	bge.n	8002d48 <__swhatbuf_r+0x2c>
 8002d2e:	89a3      	ldrh	r3, [r4, #12]
 8002d30:	2100      	movs	r1, #0
 8002d32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d36:	bf0c      	ite	eq
 8002d38:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002d3c:	2340      	movne	r3, #64	; 0x40
 8002d3e:	2000      	movs	r0, #0
 8002d40:	6031      	str	r1, [r6, #0]
 8002d42:	602b      	str	r3, [r5, #0]
 8002d44:	b016      	add	sp, #88	; 0x58
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	466a      	mov	r2, sp
 8002d4a:	f000 f849 	bl	8002de0 <_fstat_r>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	dbed      	blt.n	8002d2e <__swhatbuf_r+0x12>
 8002d52:	9901      	ldr	r1, [sp, #4]
 8002d54:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002d58:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002d5c:	4259      	negs	r1, r3
 8002d5e:	4159      	adcs	r1, r3
 8002d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d64:	e7eb      	b.n	8002d3e <__swhatbuf_r+0x22>

08002d66 <__smakebuf_r>:
 8002d66:	898b      	ldrh	r3, [r1, #12]
 8002d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d6a:	079d      	lsls	r5, r3, #30
 8002d6c:	4606      	mov	r6, r0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	d507      	bpl.n	8002d82 <__smakebuf_r+0x1c>
 8002d72:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d76:	6023      	str	r3, [r4, #0]
 8002d78:	6123      	str	r3, [r4, #16]
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	6163      	str	r3, [r4, #20]
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
 8002d82:	466a      	mov	r2, sp
 8002d84:	ab01      	add	r3, sp, #4
 8002d86:	f7ff ffc9 	bl	8002d1c <__swhatbuf_r>
 8002d8a:	9900      	ldr	r1, [sp, #0]
 8002d8c:	4605      	mov	r5, r0
 8002d8e:	4630      	mov	r0, r6
 8002d90:	f7ff fb04 	bl	800239c <_malloc_r>
 8002d94:	b948      	cbnz	r0, 8002daa <__smakebuf_r+0x44>
 8002d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d9a:	059a      	lsls	r2, r3, #22
 8002d9c:	d4ef      	bmi.n	8002d7e <__smakebuf_r+0x18>
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	f043 0302 	orr.w	r3, r3, #2
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	e7e3      	b.n	8002d72 <__smakebuf_r+0xc>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	6020      	str	r0, [r4, #0]
 8002dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db2:	81a3      	strh	r3, [r4, #12]
 8002db4:	9b00      	ldr	r3, [sp, #0]
 8002db6:	6120      	str	r0, [r4, #16]
 8002db8:	6163      	str	r3, [r4, #20]
 8002dba:	9b01      	ldr	r3, [sp, #4]
 8002dbc:	b15b      	cbz	r3, 8002dd6 <__smakebuf_r+0x70>
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dc4:	f000 f81e 	bl	8002e04 <_isatty_r>
 8002dc8:	b128      	cbz	r0, 8002dd6 <__smakebuf_r+0x70>
 8002dca:	89a3      	ldrh	r3, [r4, #12]
 8002dcc:	f023 0303 	bic.w	r3, r3, #3
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	81a3      	strh	r3, [r4, #12]
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	431d      	orrs	r5, r3
 8002dda:	81a5      	strh	r5, [r4, #12]
 8002ddc:	e7cf      	b.n	8002d7e <__smakebuf_r+0x18>
	...

08002de0 <_fstat_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	2300      	movs	r3, #0
 8002de4:	4d06      	ldr	r5, [pc, #24]	; (8002e00 <_fstat_r+0x20>)
 8002de6:	4604      	mov	r4, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	602b      	str	r3, [r5, #0]
 8002dee:	f7fd fbb0 	bl	8000552 <_fstat>
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	d102      	bne.n	8002dfc <_fstat_r+0x1c>
 8002df6:	682b      	ldr	r3, [r5, #0]
 8002df8:	b103      	cbz	r3, 8002dfc <_fstat_r+0x1c>
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	bd38      	pop	{r3, r4, r5, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000270 	.word	0x20000270

08002e04 <_isatty_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	2300      	movs	r3, #0
 8002e08:	4d05      	ldr	r5, [pc, #20]	; (8002e20 <_isatty_r+0x1c>)
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	602b      	str	r3, [r5, #0]
 8002e10:	f7fd fbae 	bl	8000570 <_isatty>
 8002e14:	1c43      	adds	r3, r0, #1
 8002e16:	d102      	bne.n	8002e1e <_isatty_r+0x1a>
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	b103      	cbz	r3, 8002e1e <_isatty_r+0x1a>
 8002e1c:	6023      	str	r3, [r4, #0]
 8002e1e:	bd38      	pop	{r3, r4, r5, pc}
 8002e20:	20000270 	.word	0x20000270

08002e24 <_init>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	bf00      	nop
 8002e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	469e      	mov	lr, r3
 8002e2e:	4770      	bx	lr

08002e30 <_fini>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	bf00      	nop
 8002e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e36:	bc08      	pop	{r3}
 8002e38:	469e      	mov	lr, r3
 8002e3a:	4770      	bx	lr
